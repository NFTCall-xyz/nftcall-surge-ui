/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  AssetRiskCache,
  AssetRiskCacheInterface,
} from "../../contracts/AssetRiskCache";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "AlreadyInitialised",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "getAssetRisk",
    outputs: [
      {
        internalType: "int256",
        name: "delta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "PNL",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "int256",
        name: "delta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "PNL",
        type: "int256",
      },
    ],
    name: "updateAssetRisk",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000805460ff60a01b1916905534801561001d57600080fd5b5061002733610030565b60018055610080565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6102ff8061008f6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632671013d1461005c5780632a6c479214610071578063715018a6146100bc5780638da5cb5b146100c4578063f2fde38b146100df575b600080fd5b61006f61006a366004610274565b6100f2565b005b6100a261007f3660046102a7565b6001600160a01b0316600090815260026020526040902080546001909101549091565b604080519283526020830191909152015b60405180910390f35b61006f61011c565b6000546040516001600160a01b0390911681526020016100b3565b61006f6100ed3660046102a7565b610130565b6100fa6101ae565b6001600160a01b03909216600090815260026020526040902090815560010155565b6101246101ae565b61012e6000610208565b565b6101386101ae565b6001600160a01b0381166101a25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6101ab81610208565b50565b6000546001600160a01b0316331461012e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610199565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461026f57600080fd5b919050565b60008060006060848603121561028957600080fd5b61029284610258565b95602085013595506040909401359392505050565b6000602082840312156102b957600080fd5b6102c282610258565b939250505056fea2646970667358221220df95ad4f10351f68ed1893a197bbb0d3119ba6f6e43ed1f131de52f57f2e38af64736f6c63430008110033";

type AssetRiskCacheConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AssetRiskCacheConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AssetRiskCache__factory extends ContractFactory {
  constructor(...args: AssetRiskCacheConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AssetRiskCache> {
    return super.deploy(overrides || {}) as Promise<AssetRiskCache>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AssetRiskCache {
    return super.attach(address) as AssetRiskCache;
  }
  override connect(signer: Signer): AssetRiskCache__factory {
    return super.connect(signer) as AssetRiskCache__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AssetRiskCacheInterface {
    return new utils.Interface(_abi) as AssetRiskCacheInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AssetRiskCache {
    return new Contract(address, _abi, signerOrProvider) as AssetRiskCache;
  }
}
