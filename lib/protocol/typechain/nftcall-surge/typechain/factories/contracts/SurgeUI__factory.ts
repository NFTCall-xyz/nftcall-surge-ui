/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, type Overrides, Signer, utils } from 'ethers'

import type { PromiseOrValue } from '../../common'
import type { SurgeUI, SurgeUIInterface } from '../../contracts/SurgeUI'

const _abi = [
  {
    inputs: [],
    name: 'MultiplicationOverflow',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'collectionAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'oracleAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'vaultAddress',
        type: 'address',
      },
    ],
    name: 'getNFTCollection',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'price',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'vol',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'maximumOptionAmount',
            type: 'uint256',
          },
        ],
        internalType: 'struct NFTCollection',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'collectionAddresses',
        type: 'address[]',
      },
      {
        internalType: 'address',
        name: 'oracleAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'vaultAddress',
        type: 'address',
      },
    ],
    name: 'getNFTCollections',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'price',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'vol',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'maximumOptionAmount',
            type: 'uint256',
          },
        ],
        internalType: 'struct NFTCollection[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'optionTokenAddress',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'positionId',
        type: 'uint256',
      },
    ],
    name: 'getPosition',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'strikeId',
            type: 'uint256',
          },
          {
            internalType: 'enum PositionState',
            name: 'state',
            type: 'uint8',
          },
          {
            internalType: 'enum OptionType',
            name: 'optionType',
            type: 'uint8',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'premium',
            type: 'uint256',
          },
        ],
        internalType: 'struct OptionPosition',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'pricerAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'collection',
        type: 'address',
      },
      {
        internalType: 'enum OptionType',
        name: 'optionType',
        type: 'uint8',
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'spotPrice',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'strikePrice',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'duration',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'expiry',
            type: 'uint256',
          },
        ],
        internalType: 'struct Strike',
        name: 'strike_',
        type: 'tuple',
      },
    ],
    name: 'getPremium',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'vaultAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'lpTokenAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'wETHAddress',
        type: 'address',
      },
    ],
    name: 'getVault',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'wETHBalance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'balance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'lockedBalance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'maxWithdraw',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'releaseTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct VaultLPToken',
            name: 'lpToken',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'totalSupply',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'totalAssets',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'totalLockedAssets',
            type: 'uint256',
          },
          {
            internalType: 'int256',
            name: 'unrealizedPNL',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'unrealizedPremium',
            type: 'uint256',
          },
        ],
        internalType: 'struct Vault',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'vaultAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'lpTokenAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'wETHAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'userAddress',
        type: 'address',
      },
    ],
    name: 'getVaultWithUser',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'wETHBalance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'balance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'lockedBalance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'maxWithdraw',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'releaseTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct VaultLPToken',
            name: 'lpToken',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'totalSupply',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'totalAssets',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'totalLockedAssets',
            type: 'uint256',
          },
          {
            internalType: 'int256',
            name: 'unrealizedPNL',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'unrealizedPremium',
            type: 'uint256',
          },
        ],
        internalType: 'struct Vault',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const

const _bytecode =
  '0x608060405234801561001057600080fd5b506111aa806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630a29701d14610067578063347c5d43146100e85780633adbb5af146100fb578063777a30031461011b578063777dd32d1461013b57806399a141891461015c575b600080fd5b61007a610075366004610b1e565b61017c565b6040805182518051825260208082015181840152818401518385015260608083015181850152608092830151838501529085015160a0808501919091529385015160c084015284015160e0830152830151610100820152910151610120820152610140015b60405180910390f35b61007a6100f6366004610b72565b610199565b61010e610109366004610bb5565b6101ba565b6040516100df9190610c09565b61012e610129366004610ca2565b610262565b6040516100df9190610d68565b61014e610149366004610dda565b610341565b6040519081526020016100df565b61016f61016a366004610b72565b610474565b6040516100df9190610e87565b610184610a9c565b610190858585856104ab565b95945050505050565b6101a1610a9c565b60006101af858585846104ab565b9150505b9392505050565b6101ed6040805160a081019091526000808252602082019081526020016000815260200160008152602001600081525090565b6040516352e5491f60e01b81526004810183905283906001600160a01b038216906352e5491f9060240160a060405180830381865afa158015610234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102589190610ea8565b9150505b92915050565b60606000845167ffffffffffffffff81111561028057610280610c5b565b6040519080825280602002602001820160405280156102d557816020015b6102c260405180606001604052806000815260200160008152602001600081525090565b81526020019060019003908161029e5790505b50905060005b8551811015610338576103088682815181106102f9576102f9610f2b565b602002602001015186866108b4565b82828151811061031a5761031a610f2b565b6020026020010181905250808061033090610f57565b9150506102db565b50949350505050565b60208101516040516311277a2560e01b8152600091869183916001600160a01b038416916311277a259161037b918a918a91600401610f70565b602060405180830381865afa158015610398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bc9190610f9b565b9050600061046860646103d16006600a611098565b6103dc9060966110a4565b6103e691906110bb565b865160208801516040808a0151905163959c088960e01b81526001600160a01b0389169363959c088993610421938e938b91906004016110dd565b602060405180830381865afa15801561043e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104629190610f9b565b906109f1565b98975050505050505050565b61049860405180606001604052806000815260200160008152602001600081525090565b6104a38484846108b4565b949350505050565b6104b3610a9c565b6104bb610a9c565b856001600160a01b03841615610702576040516370a0823160e01b81526001600160a01b038581166004830152869188918216906370a0823190602401602060405180830381865afa158015610515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105399190610f9b565b8451602001526040516370a0823160e01b81526001600160a01b0387811660048301528316906370a0823190602401602060405180830381865afa158015610585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a99190610f9b565b845152604051632c9aab9b60e11b81526001600160a01b038781166004830152821690635935573690602401602060405180830381865afa1580156105f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106169190610f9b565b84516040908101919091525163ce96cb7760e01b81526001600160a01b03878116600483015282169063ce96cb7790602401602060405180830381865afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190610f9b565b845160600152604051630684cb8960e31b81526001600160a01b0387811660048301528216906334265c4890602401602060405180830381865afa1580156106d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f99190610f9b565b84516080015250505b806001600160a01b03166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa158015610740573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107649190610f9b565b826040018181525050806001600160a01b0316632e9403886040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cf9190610f9b565b826060018181525050806001600160a01b03166308b8e7d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a9190610f9b565b826080018181525050806001600160a01b031663568c11626040518163ffffffff1660e01b8152600401602060405180830381865afa158015610881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a59190610f9b565b60a08301525095945050505050565b6108d860405180606001604052806000815260200160008152602001600081525090565b6108fc60405180606001604052806000815260200160008152602001600081525090565b60405163220386fb60e21b81526001600160a01b03868116600483015285919082169063880e1bec906024016040805180830381865afa158015610944573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610968919061110d565b602084015282526040516365ab438d60e11b815284906001600160a01b0382169063cb56871a906109a0908a90600090600401611131565b602060405180830381865afa1580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190610f9b565b6040840152509095945050505050565b60008215806109fe575081155b15610a0b5750600061025c565b816002610a1a6006600a611098565b610a2491906110bb565b610a309060001961114e565b610a3a91906110bb565b831115610a5a57604051636be580af60e11b815260040160405180910390fd5b610a666006600a611098565b6002610a746006600a611098565b610a7e91906110bb565b610a8884866110a4565b610a929190611161565b6101b391906110bb565b6040518060c00160405280610ad96040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b0381168114610b1957600080fd5b919050565b60008060008060808587031215610b3457600080fd5b610b3d85610b02565b9350610b4b60208601610b02565b9250610b5960408601610b02565b9150610b6760608601610b02565b905092959194509250565b600080600060608486031215610b8757600080fd5b610b9084610b02565b9250610b9e60208501610b02565b9150610bac60408501610b02565b90509250925092565b60008060408385031215610bc857600080fd5b610bd183610b02565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b60028110610c0557610c05610bdf565b9052565b81518152602082015160a082019060048110610c2757610c27610bdf565b806020840152506040830151610c406040840182610bf5565b50606083015160608301526080830151608083015292915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610c9a57610c9a610c5b565b604052919050565b600080600060608486031215610cb757600080fd5b833567ffffffffffffffff80821115610ccf57600080fd5b818601915086601f830112610ce357600080fd5b8135602082821115610cf757610cf7610c5b565b8160051b9250610d08818401610c71565b828152928401810192818101908a851115610d2257600080fd5b948201945b84861015610d4757610d3886610b02565b82529482019490820190610d27565b9750610d569050888201610b02565b955050505050610bac60408501610b02565b6020808252825182820181905260009190848201906040850190845b81811015610dbe57610dab8385518051825260208082015190830152604090810151910152565b9284019260609290920191600101610d84565b50909695505050505050565b60028110610dd757600080fd5b50565b60008060008084860360e0811215610df157600080fd5b610dfa86610b02565b9450610e0860208701610b02565b93506040860135610e1881610dca565b92506080605f1982011215610e2c57600080fd5b506040516080810181811067ffffffffffffffff82111715610e5057610e50610c5b565b8060405250606086013581526080860135602082015260a0860135604082015260c086013560608201528091505092959194509250565b8151815260208083015190820152604080830151908201526060810161025c565b600060a08284031215610eba57600080fd5b60405160a0810181811067ffffffffffffffff82111715610edd57610edd610c5b565b60405282518152602083015160048110610ef657600080fd5b60208201526040830151610f0981610dca565b6040820152606083810151908201526080928301519281019290925250919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610f6957610f69610f41565b5060010190565b6001600160a01b038416815260608101610f8d6020830185610bf5565b826040830152949350505050565b600060208284031215610fad57600080fd5b5051919050565b600181815b80851115610fef578160001904821115610fd557610fd5610f41565b80851615610fe257918102915b93841c9390800290610fb9565b509250929050565b6000826110065750600161025c565b816110135750600061025c565b816001811461102957600281146110335761104f565b600191505061025c565b60ff84111561104457611044610f41565b50506001821b61025c565b5060208310610133831016604e8410600b8410161715611072575081810a61025c565b61107c8383610fb4565b806000190482111561109057611090610f41565b029392505050565b60006101b38383610ff7565b808202811582820484141761025c5761025c610f41565b6000826110d857634e487b7160e01b600052601260045260246000fd5b500490565b60a081016110eb8288610bf5565b8560208301528460408301528360608301528260808301529695505050505050565b6000806040838503121561112057600080fd5b505080516020909101519092909150565b6001600160a01b0383168152604081016101b36020830184610bf5565b8181038181111561025c5761025c610f41565b8082018082111561025c5761025c610f4156fea264697066735822122092385524c348b27ba96c6a456550afda7b26e4c84452103649926c9819541f7564736f6c63430008110033'

type SurgeUIConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: SurgeUIConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class SurgeUI__factory extends ContractFactory {
  constructor(...args: SurgeUIConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<SurgeUI> {
    return super.deploy(overrides || {}) as Promise<SurgeUI>
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  override attach(address: string): SurgeUI {
    return super.attach(address) as SurgeUI
  }
  override connect(signer: Signer): SurgeUI__factory {
    return super.connect(signer) as SurgeUI__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): SurgeUIInterface {
    return new utils.Interface(_abi) as SurgeUIInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SurgeUI {
    return new Contract(address, _abi, signerOrProvider) as SurgeUI
  }
}
