/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, type Overrides, Signer, utils } from 'ethers'

import type { PromiseOrValue } from '../../common'
import type { SurgeUI, SurgeUIInterface } from '../../contracts/SurgeUI'

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'collectionAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'oracleAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'vaultAddress',
        type: 'address',
      },
    ],
    name: 'getNFTCollection',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'price',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'vol',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'maximumOptionAmount',
            type: 'uint256',
          },
        ],
        internalType: 'struct NFTCollection',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'collectionAddresses',
        type: 'address[]',
      },
      {
        internalType: 'address',
        name: 'oracleAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'vaultAddress',
        type: 'address',
      },
    ],
    name: 'getNFTCollections',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'price',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'vol',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'maximumOptionAmount',
            type: 'uint256',
          },
        ],
        internalType: 'struct NFTCollection[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'optionTokenAddress',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'positionId',
        type: 'uint256',
      },
    ],
    name: 'getPosition',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'strikeId',
            type: 'uint256',
          },
          {
            internalType: 'enum PositionState',
            name: 'state',
            type: 'uint8',
          },
          {
            internalType: 'enum OptionType',
            name: 'optionType',
            type: 'uint8',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'premium',
            type: 'uint256',
          },
        ],
        internalType: 'struct OptionPosition',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'vaultAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'lpTokenAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'wETHAddress',
        type: 'address',
      },
    ],
    name: 'getVault',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'wETHBalance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'balance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'lockedBalance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'maxWithdraw',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'releaseTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct VaultLPToken',
            name: 'lpToken',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'totalSupply',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'totalAssets',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'totalLockedAssets',
            type: 'uint256',
          },
          {
            internalType: 'int256',
            name: 'unrealizedPNL',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'unrealizedPremium',
            type: 'uint256',
          },
        ],
        internalType: 'struct Vault',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'vaultAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'lpTokenAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'wETHAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'userAddress',
        type: 'address',
      },
    ],
    name: 'getVaultWithUser',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'wETHBalance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'balance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'lockedBalance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'maxWithdraw',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'releaseTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct VaultLPToken',
            name: 'lpToken',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'totalSupply',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'totalAssets',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'totalLockedAssets',
            type: 'uint256',
          },
          {
            internalType: 'int256',
            name: 'unrealizedPNL',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'unrealizedPremium',
            type: 'uint256',
          },
        ],
        internalType: 'struct Vault',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const

const _bytecode =
  '0x608060405234801561001057600080fd5b50610d35806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630a29701d1461005c578063347c5d43146100dd5780633adbb5af146100f0578063777a30031461011057806399a1418914610130575b600080fd5b61006f61006a366004610914565b610150565b6040805182518051825260208082015181840152818401518385015260608083015181850152608092830151838501529085015160a0808501919091529385015160c084015284015160e0830152830151610100820152910151610120820152610140015b60405180910390f35b61006f6100eb366004610968565b61016d565b6101036100fe3660046109ab565b61018e565b6040516100d491906109ff565b61012361011e366004610a98565b610236565b6040516100d49190610b5e565b61014361013e366004610968565b610315565b6040516100d49190610bc0565b610158610892565b6101648585858561034c565b95945050505050565b610175610892565b60006101838585858461034c565b9150505b9392505050565b6101c16040805160a081019091526000808252602082019081526020016000815260200160008152602001600081525090565b6040516352e5491f60e01b81526004810183905283906001600160a01b038216906352e5491f9060240160a060405180830381865afa158015610208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022c9190610be1565b9150505b92915050565b60606000845167ffffffffffffffff81111561025457610254610a51565b6040519080825280602002602001820160405280156102a957816020015b61029660405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816102725790505b50905060005b855181101561030c576102dc8682815181106102cd576102cd610c68565b60200260200101518686610755565b8282815181106102ee576102ee610c68565b6020026020010181905250808061030490610c7e565b9150506102af565b50949350505050565b61033960405180606001604052806000815260200160008152602001600081525090565b610344848484610755565b949350505050565b610354610892565b61035c610892565b856001600160a01b038416156105a3576040516370a0823160e01b81526001600160a01b038581166004830152869188918216906370a0823190602401602060405180830381865afa1580156103b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103da9190610ca5565b8451602001526040516370a0823160e01b81526001600160a01b0387811660048301528316906370a0823190602401602060405180830381865afa158015610426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044a9190610ca5565b845152604051632c9aab9b60e11b81526001600160a01b038781166004830152821690635935573690602401602060405180830381865afa158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b79190610ca5565b84516040908101919091525163ce96cb7760e01b81526001600160a01b03878116600483015282169063ce96cb7790602401602060405180830381865afa158015610506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052a9190610ca5565b845160600152604051630684cb8960e31b81526001600160a01b0387811660048301528216906334265c4890602401602060405180830381865afa158015610576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059a9190610ca5565b84516080015250505b806001600160a01b03166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106059190610ca5565b826040018181525050806001600160a01b0316632e9403886040518163ffffffff1660e01b8152600401602060405180830381865afa15801561064c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106709190610ca5565b826060018181525050806001600160a01b03166308b8e7d06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106db9190610ca5565b826080018181525050806001600160a01b031663568c11626040518163ffffffff1660e01b8152600401602060405180830381865afa158015610722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107469190610ca5565b60a08301525095945050505050565b61077960405180606001604052806000815260200160008152602001600081525090565b61079d60405180606001604052806000815260200160008152602001600081525090565b60405163220386fb60e21b81526001600160a01b03868116600483015285919082169063880e1bec906024016040805180830381865afa1580156107e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108099190610cbe565b602084015282526040516365ab438d60e11b815284906001600160a01b0382169063cb56871a90610841908a90600090600401610ce2565b602060405180830381865afa15801561085e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108829190610ca5565b6040840152509095945050505050565b6040518060c001604052806108cf6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461090f57600080fd5b919050565b6000806000806080858703121561092a57600080fd5b610933856108f8565b9350610941602086016108f8565b925061094f604086016108f8565b915061095d606086016108f8565b905092959194509250565b60008060006060848603121561097d57600080fd5b610986846108f8565b9250610994602085016108f8565b91506109a2604085016108f8565b90509250925092565b600080604083850312156109be57600080fd5b6109c7836108f8565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b600281106109fb576109fb6109d5565b9052565b81518152602082015160a082019060048110610a1d57610a1d6109d5565b806020840152506040830151610a3660408401826109eb565b50606083015160608301526080830151608083015292915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610a9057610a90610a51565b604052919050565b600080600060608486031215610aad57600080fd5b833567ffffffffffffffff80821115610ac557600080fd5b818601915086601f830112610ad957600080fd5b8135602082821115610aed57610aed610a51565b8160051b9250610afe818401610a67565b828152928401810192818101908a851115610b1857600080fd5b948201945b84861015610b3d57610b2e866108f8565b82529482019490820190610b1d565b9750610b4c90508882016108f8565b9550505050506109a2604085016108f8565b6020808252825182820181905260009190848201906040850190845b81811015610bb457610ba18385518051825260208082015190830152604090810151910152565b9284019260609290920191600101610b7a565b50909695505050505050565b81518152602080830151908201526040808301519082015260608101610230565b600060a08284031215610bf357600080fd5b60405160a0810181811067ffffffffffffffff82111715610c1657610c16610a51565b60405282518152602083015160048110610c2f57600080fd5b6020820152604083015160028110610c4657600080fd5b6040820152606083810151908201526080928301519281019290925250919050565b634e487b7160e01b600052603260045260246000fd5b600060018201610c9e57634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215610cb757600080fd5b5051919050565b60008060408385031215610cd157600080fd5b505080516020909101519092909150565b6001600160a01b03831681526040810161018760208301846109eb56fea264697066735822122035bcdf6a0276b017ade3c8908c0850e6828ed44e4ef57e3282444f035bb64abc64736f6c63430008110033'

type SurgeUIConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: SurgeUIConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class SurgeUI__factory extends ContractFactory {
  constructor(...args: SurgeUIConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<SurgeUI> {
    return super.deploy(overrides || {}) as Promise<SurgeUI>
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  override attach(address: string): SurgeUI {
    return super.attach(address) as SurgeUI
  }
  override connect(signer: Signer): SurgeUI__factory {
    return super.connect(signer) as SurgeUI__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): SurgeUIInterface {
    return new utils.Interface(_abi) as SurgeUIInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SurgeUI {
    return new Contract(address, _abi, signerOrProvider) as SurgeUI
  }
}
