/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, type Overrides, Signer, utils } from 'ethers'

import type { PromiseOrValue } from '../../common'
import type { SurgeUI, SurgeUIInterface } from '../../contracts/SurgeUI'

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'collectionAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'oracleAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'vaultAddress',
        type: 'address',
      },
    ],
    name: 'getNFTCollection',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'price',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'vol',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'maximumOptionAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'openInterest',
            type: 'uint256',
          },
        ],
        internalType: 'struct NFTCollection',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'collectionAddresses',
        type: 'address[]',
      },
      {
        internalType: 'address',
        name: 'oracleAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'vaultAddress',
        type: 'address',
      },
    ],
    name: 'getNFTCollections',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'price',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'vol',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'maximumOptionAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'openInterest',
            type: 'uint256',
          },
        ],
        internalType: 'struct NFTCollection[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'optionTokenAddress',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'positionId',
        type: 'uint256',
      },
    ],
    name: 'getPosition',
    outputs: [
      {
        components: [
          {
            internalType: 'enum PositionState',
            name: 'state',
            type: 'uint8',
          },
          {
            internalType: 'enum OptionType',
            name: 'optionType',
            type: 'uint8',
          },
          {
            internalType: 'address',
            name: 'payer',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'strikeId',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'premium',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'maximumPremium',
            type: 'uint256',
          },
        ],
        internalType: 'struct OptionPosition',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'vaultAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'lpTokenAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'wETHAddress',
        type: 'address',
      },
    ],
    name: 'getVault',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'wETHBalance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'wETHAllowance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'balance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'lockedBalance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'maxWithdraw',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'releaseTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct VaultLPToken',
            name: 'lpToken',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'wETHAllowance',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'totalSupply',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'totalAssets',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'executionFee',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'totalLockedAssets',
            type: 'uint256',
          },
          {
            internalType: 'int256',
            name: 'unrealizedPNL',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'unrealizedPremium',
            type: 'uint256',
          },
        ],
        internalType: 'struct Vault',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'vaultAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'lpTokenAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'wETHAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'userAddress',
        type: 'address',
      },
    ],
    name: 'getVaultWithUser',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'wETHBalance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'wETHAllowance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'balance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'lockedBalance',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'maxWithdraw',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'releaseTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct VaultLPToken',
            name: 'lpToken',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'wETHAllowance',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'totalSupply',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'totalAssets',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'executionFee',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'totalLockedAssets',
            type: 'uint256',
          },
          {
            internalType: 'int256',
            name: 'unrealizedPNL',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'unrealizedPremium',
            type: 'uint256',
          },
        ],
        internalType: 'struct Vault',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const

const _bytecode =
  ''

type SurgeUIConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: SurgeUIConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class SurgeUI__factory extends ContractFactory {
  constructor(...args: SurgeUIConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<SurgeUI> {
    return super.deploy(overrides || {}) as Promise<SurgeUI>
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  override attach(address: string): SurgeUI {
    return super.attach(address) as SurgeUI
  }
  override connect(signer: Signer): SurgeUI__factory {
    return super.connect(signer) as SurgeUI__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): SurgeUIInterface {
    return new utils.Interface(_abi) as SurgeUIInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SurgeUI {
    return new Contract(address, _abi, signerOrProvider) as SurgeUI
  }
}
