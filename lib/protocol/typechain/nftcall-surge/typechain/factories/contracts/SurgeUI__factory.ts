/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { SurgeUI, SurgeUIInterface } from "../../contracts/SurgeUI";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "collectionAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "oracleAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "vaultAddress",
        type: "address",
      },
    ],
    name: "getNFTCollection",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maximumOptionAmount",
            type: "uint256",
          },
        ],
        internalType: "struct NFTCollection",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "collectionAddresses",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "oracleAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "vaultAddress",
        type: "address",
      },
    ],
    name: "getNFTCollections",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maximumOptionAmount",
            type: "uint256",
          },
        ],
        internalType: "struct NFTCollection[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vaultAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "lpTokenAddress",
        type: "address",
      },
    ],
    name: "getVault",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "balance",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lockedBalance",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxWithdraw",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "releaseTime",
                type: "uint256",
              },
            ],
            internalType: "struct VaultLPToken",
            name: "lpToken",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalAssets",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalLockedAssets",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "unrealizedPNL",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "unrealizedPremium",
            type: "uint256",
          },
        ],
        internalType: "struct Vault",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vaultAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "lpTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    name: "getVaultWithUser",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "balance",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lockedBalance",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxWithdraw",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "releaseTime",
                type: "uint256",
              },
            ],
            internalType: "struct VaultLPToken",
            name: "lpToken",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalAssets",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalLockedAssets",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "unrealizedPNL",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "unrealizedPremium",
            type: "uint256",
          },
        ],
        internalType: "struct Vault",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a90806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063777a3003146100515780638fd8e9c31461007a57806399a14189146100f0578063bbd7edc514610110575b600080fd5b61006461005f3660046107ce565b610123565b60405161007191906108b5565b60405180910390f35b61008d610088366004610917565b610202565b60408051825180518252602080820151818401528184015183850152606091820151828401528401516080808401919091529284015160a0808401919091529084015160c08301529183015160e082015291015161010082015261012001610071565b6101036100fe366004610917565b61021d565b6040516100719190610951565b61008d61011e366004610972565b61024c565b60606000845167ffffffffffffffff8111156101415761014161079c565b60405190808252806020026020018201604052801561019657816020015b61018360405180606001604052806000815260200160008152602001600081525090565b81526020019060019003908161015f5790505b50905060005b85518110156101f9576101c98682815181106101ba576101ba6109a5565b6020026020010151868661026b565b8282815181106101db576101db6109a5565b602002602001018190525080806101f1906109bb565b91505061019c565b50949350505050565b61020a61073d565b6102158484846103a8565b949350505050565b61024160405180606001604052806000815260200160008152602001600081525090565b61021584848461026b565b61025461073d565b60006102618484836103a8565b9150505b92915050565b61028f60405180606001604052806000815260200160008152602001600081525090565b6102b360405180606001604052806000815260200160008152602001600081525090565b60405163220386fb60e21b81526001600160a01b03868116600483015285919082169063880e1bec906024016040805180830381865afa1580156102fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031f91906109e2565b602084015282526040516365ab438d60e11b815284906001600160a01b0382169063cb56871a90610357908a90600090600401610a06565b602060405180830381865afa158015610374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103989190610a41565b6040840152509095945050505050565b6103b061073d565b6103b861073d565b83856001600160a01b0385161561058a576040516370a0823160e01b81526001600160a01b0386811660048301528316906370a0823190602401602060405180830381865afa15801561040f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104339190610a41565b835152604051632c9aab9b60e11b81526001600160a01b038681166004830152831690635935573690602401602060405180830381865afa15801561047c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a09190610a41565b83516020015260405163ce96cb7760e01b81526001600160a01b03868116600483015283169063ce96cb7790602401602060405180830381865afa1580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105109190610a41565b835160409081019190915251630684cb8960e31b81526001600160a01b0386811660048301528316906334265c4890602401602060405180830381865afa15801561055f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105839190610a41565b8351606001525b806001600160a01b03166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ec9190610a41565b836040018181525050806001600160a01b0316632e9403886040518163ffffffff1660e01b8152600401602060405180830381865afa158015610633573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106579190610a41565b836060018181525050806001600160a01b03166308b8e7d06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561069e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c29190610a41565b836080018181525050806001600160a01b031663568c11626040518163ffffffff1660e01b8152600401602060405180830381865afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d9190610a41565b60a0840152509095945050505050565b6040518060c001604052806107736040518060800160405280600081526020016000815260200160008152602001600081525090565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b03811681146107c957600080fd5b919050565b6000806000606084860312156107e357600080fd5b833567ffffffffffffffff808211156107fb57600080fd5b818601915086601f83011261080f57600080fd5b81356020828211156108235761082361079c565b8160051b604051601f19603f830116810181811086821117156108485761084861079c565b60405292835281830193508481018201928a84111561086657600080fd5b948201945b8386101561088b5761087c866107b2565b8552948201949382019361086b565b975061089a90508882016107b2565b9550505050506108ac604085016107b2565b90509250925092565b6020808252825182820181905260009190848201906040850190845b8181101561090b576108f88385518051825260208082015190830152604090810151910152565b92840192606092909201916001016108d1565b50909695505050505050565b60008060006060848603121561092c57600080fd5b610935846107b2565b9250610943602085016107b2565b91506108ac604085016107b2565b81518152602080830151908201526040808301519082015260608101610265565b6000806040838503121561098557600080fd5b61098e836107b2565b915061099c602084016107b2565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016109db57634e487b7160e01b600052601160045260246000fd5b5060010190565b600080604083850312156109f557600080fd5b505080516020909101519092909150565b6001600160a01b03831681526040810160028310610a3457634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b600060208284031215610a5357600080fd5b505191905056fea26469706673582212207b9a67a0a5f1f5904cc405a645481829b7e3266dd0c235a6133bd44c36ee741a64736f6c63430008110033";

type SurgeUIConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SurgeUIConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SurgeUI__factory extends ContractFactory {
  constructor(...args: SurgeUIConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SurgeUI> {
    return super.deploy(overrides || {}) as Promise<SurgeUI>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SurgeUI {
    return super.attach(address) as SurgeUI;
  }
  override connect(signer: Signer): SurgeUI__factory {
    return super.connect(signer) as SurgeUI__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SurgeUIInterface {
    return new utils.Interface(_abi) as SurgeUIInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SurgeUI {
    return new Contract(address, _abi, signerOrProvider) as SurgeUI;
  }
}
