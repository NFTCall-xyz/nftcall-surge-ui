/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, type Overrides, Signer, utils } from 'ethers'

import type { FixedPointMathLib, FixedPointMathLibInterface } from '../../../contracts/libraries/FixedPointMathLib'

const _abi = [
  {
    inputs: [],
    name: 'ExpOverflow',
    type: 'error',
  },
  {
    inputs: [],
    name: 'LnNegativeUndefined',
    type: 'error',
  },
  {
    inputs: [],
    name: 'Overflow',
    type: 'error',
  },
] as const

const _bytecode =
  '0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203f066a9b6837a8b855485cd784ebbddbbdb22973932c320dbcbdab76828a687f64736f6c63430008110033'

type FixedPointMathLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: FixedPointMathLibConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1

export class FixedPointMathLib__factory extends ContractFactory {
  constructor(...args: FixedPointMathLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(overrides?: Overrides & { from?: string }): Promise<FixedPointMathLib> {
    return super.deploy(overrides || {}) as Promise<FixedPointMathLib>
  }
  override getDeployTransaction(overrides?: Overrides & { from?: string }): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  override attach(address: string): FixedPointMathLib {
    return super.attach(address) as FixedPointMathLib
  }
  override connect(signer: Signer): FixedPointMathLib__factory {
    return super.connect(signer) as FixedPointMathLib__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): FixedPointMathLibInterface {
    return new utils.Interface(_abi) as FixedPointMathLibInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FixedPointMathLib {
    return new Contract(address, _abi, signerOrProvider) as FixedPointMathLib
  }
}
