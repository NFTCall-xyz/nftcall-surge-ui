/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type NFTCollectionStruct = {
  price: PromiseOrValue<BigNumberish>;
  vol: PromiseOrValue<BigNumberish>;
  maximumOptionAmount: PromiseOrValue<BigNumberish>;
};

export type NFTCollectionStructOutput = [BigNumber, BigNumber, BigNumber] & {
  price: BigNumber;
  vol: BigNumber;
  maximumOptionAmount: BigNumber;
};

export type VaultLPTokenStruct = {
  balance: PromiseOrValue<BigNumberish>;
  lockedBalance: PromiseOrValue<BigNumberish>;
  maxWithdraw: PromiseOrValue<BigNumberish>;
  releaseTime: PromiseOrValue<BigNumberish>;
};

export type VaultLPTokenStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  balance: BigNumber;
  lockedBalance: BigNumber;
  maxWithdraw: BigNumber;
  releaseTime: BigNumber;
};

export type VaultStruct = {
  lpToken: VaultLPTokenStruct;
  totalSupply: PromiseOrValue<BigNumberish>;
  totalAssets: PromiseOrValue<BigNumberish>;
  totalLockedAssets: PromiseOrValue<BigNumberish>;
  unrealizedPNL: PromiseOrValue<BigNumberish>;
  unrealizedPremium: PromiseOrValue<BigNumberish>;
};

export type VaultStructOutput = [
  VaultLPTokenStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  lpToken: VaultLPTokenStructOutput;
  totalSupply: BigNumber;
  totalAssets: BigNumber;
  totalLockedAssets: BigNumber;
  unrealizedPNL: BigNumber;
  unrealizedPremium: BigNumber;
};

export interface SurgeUIInterface extends utils.Interface {
  functions: {
    "getNFTCollection(address,address,address)": FunctionFragment;
    "getNFTCollections(address[],address,address)": FunctionFragment;
    "getVault(address,address)": FunctionFragment;
    "getVaultWithUser(address,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getNFTCollection"
      | "getNFTCollections"
      | "getVault"
      | "getVaultWithUser"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getNFTCollection",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTCollections",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getVault",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultWithUser",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getNFTCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultWithUser",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SurgeUI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SurgeUIInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getNFTCollection(
      collectionAddress: PromiseOrValue<string>,
      oracleAddress: PromiseOrValue<string>,
      vaultAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[NFTCollectionStructOutput]>;

    getNFTCollections(
      collectionAddresses: PromiseOrValue<string>[],
      oracleAddress: PromiseOrValue<string>,
      vaultAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[NFTCollectionStructOutput[]]>;

    getVault(
      vaultAddress: PromiseOrValue<string>,
      lpTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[VaultStructOutput]>;

    getVaultWithUser(
      vaultAddress: PromiseOrValue<string>,
      lpTokenAddress: PromiseOrValue<string>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[VaultStructOutput]>;
  };

  getNFTCollection(
    collectionAddress: PromiseOrValue<string>,
    oracleAddress: PromiseOrValue<string>,
    vaultAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<NFTCollectionStructOutput>;

  getNFTCollections(
    collectionAddresses: PromiseOrValue<string>[],
    oracleAddress: PromiseOrValue<string>,
    vaultAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<NFTCollectionStructOutput[]>;

  getVault(
    vaultAddress: PromiseOrValue<string>,
    lpTokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<VaultStructOutput>;

  getVaultWithUser(
    vaultAddress: PromiseOrValue<string>,
    lpTokenAddress: PromiseOrValue<string>,
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<VaultStructOutput>;

  callStatic: {
    getNFTCollection(
      collectionAddress: PromiseOrValue<string>,
      oracleAddress: PromiseOrValue<string>,
      vaultAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NFTCollectionStructOutput>;

    getNFTCollections(
      collectionAddresses: PromiseOrValue<string>[],
      oracleAddress: PromiseOrValue<string>,
      vaultAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NFTCollectionStructOutput[]>;

    getVault(
      vaultAddress: PromiseOrValue<string>,
      lpTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<VaultStructOutput>;

    getVaultWithUser(
      vaultAddress: PromiseOrValue<string>,
      lpTokenAddress: PromiseOrValue<string>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<VaultStructOutput>;
  };

  filters: {};

  estimateGas: {
    getNFTCollection(
      collectionAddress: PromiseOrValue<string>,
      oracleAddress: PromiseOrValue<string>,
      vaultAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTCollections(
      collectionAddresses: PromiseOrValue<string>[],
      oracleAddress: PromiseOrValue<string>,
      vaultAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(
      vaultAddress: PromiseOrValue<string>,
      lpTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultWithUser(
      vaultAddress: PromiseOrValue<string>,
      lpTokenAddress: PromiseOrValue<string>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getNFTCollection(
      collectionAddress: PromiseOrValue<string>,
      oracleAddress: PromiseOrValue<string>,
      vaultAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTCollections(
      collectionAddresses: PromiseOrValue<string>[],
      oracleAddress: PromiseOrValue<string>,
      vaultAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(
      vaultAddress: PromiseOrValue<string>,
      lpTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultWithUser(
      vaultAddress: PromiseOrValue<string>,
      lpTokenAddress: PromiseOrValue<string>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
