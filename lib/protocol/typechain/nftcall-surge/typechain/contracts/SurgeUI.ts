/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from '../common'

export type AnalyticsStruct = { TVL: BigNumberish; ncETHPrice: BigNumberish }

export type AnalyticsStructOutput = [BigNumber, BigNumber] & {
  TVL: BigNumber
  ncETHPrice: BigNumber
}

export type NFTCollectionStruct = {
  price: BigNumberish
  vol: BigNumberish
  maximumOptionAmount: BigNumberish
}

export type NFTCollectionStructOutput = [BigNumber, BigNumber, BigNumber] & {
  price: BigNumber
  vol: BigNumber
  maximumOptionAmount: BigNumber
}

export type NFTCollectionStausStruct = {
  price: BigNumberish
  vol: BigNumberish
  delta: BigNumberish
  unrealizedPNL: BigNumberish
  openInterest: BigNumberish
  optionTokenTotalValue: BigNumberish
  optionTokenTotalLockedValue: BigNumberish
  collectionWeight: BigNumberish
  callOptionAmount: BigNumberish
  putOptionAmount: BigNumberish
}

export type NFTCollectionStausStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  price: BigNumber
  vol: BigNumber
  delta: BigNumber
  unrealizedPNL: BigNumber
  openInterest: BigNumber
  optionTokenTotalValue: BigNumber
  optionTokenTotalLockedValue: BigNumber
  collectionWeight: BigNumber
  callOptionAmount: BigNumber
  putOptionAmount: BigNumber
}

export type OptionPositionStruct = {
  state: BigNumberish
  optionType: BigNumberish
  payer: string
  strikeId: BigNumberish
  amount: BigNumberish
  premium: BigNumberish
  maximumPremium: BigNumberish
}

export type OptionPositionStructOutput = [number, number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
  state: number
  optionType: number
  payer: string
  strikeId: BigNumber
  amount: BigNumber
  premium: BigNumber
  maximumPremium: BigNumber
}

export type VaultLPTokenStruct = {
  wETHBalance: BigNumberish
  wETHAllowance: BigNumberish
  balance: BigNumberish
  allowance: BigNumberish
  lockedBalance: BigNumberish
  maxWithdraw: BigNumberish
  maxRedeem: BigNumberish
  releaseTime: BigNumberish
}

export type VaultLPTokenStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  wETHBalance: BigNumber
  wETHAllowance: BigNumber
  balance: BigNumber
  allowance: BigNumber
  lockedBalance: BigNumber
  maxWithdraw: BigNumber
  maxRedeem: BigNumber
  releaseTime: BigNumber
}

export type VaultStruct = {
  lpToken: VaultLPTokenStruct
  ncETHPrice: BigNumberish
  wETHAllowance: BigNumberish
  totalSupply: BigNumberish
  totalAssets: BigNumberish
  executionFee: BigNumberish
  reserveRatio: BigNumberish
  feeRatio: BigNumberish
  profitFeeRatio: BigNumberish
  timeWindowForActivation: BigNumberish
  maximumLockRatio: BigNumberish
  maximumCallStrikePriceRatio: BigNumberish
  maximumPutStrikePriceRatio: BigNumberish
  minimumCallStrikePriceRatio: BigNumberish
  minimumPutStrikePriceRatio: BigNumberish
  maximumDuration: BigNumberish
  minimumDuration: BigNumberish
  timeScale: BigNumberish
  totalLockedAssets: BigNumberish
  unrealizedPNL: BigNumberish
  unrealizedPremium: BigNumberish
}

export type VaultStructOutput = [
  VaultLPTokenStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  lpToken: VaultLPTokenStructOutput
  ncETHPrice: BigNumber
  wETHAllowance: BigNumber
  totalSupply: BigNumber
  totalAssets: BigNumber
  executionFee: BigNumber
  reserveRatio: BigNumber
  feeRatio: BigNumber
  profitFeeRatio: BigNumber
  timeWindowForActivation: BigNumber
  maximumLockRatio: BigNumber
  maximumCallStrikePriceRatio: BigNumber
  maximumPutStrikePriceRatio: BigNumber
  minimumCallStrikePriceRatio: BigNumber
  minimumPutStrikePriceRatio: BigNumber
  maximumDuration: BigNumber
  minimumDuration: BigNumber
  timeScale: BigNumber
  totalLockedAssets: BigNumber
  unrealizedPNL: BigNumber
  unrealizedPremium: BigNumber
}

export interface SurgeUIInterface extends utils.Interface {
  functions: {
    'getAnalytics(address,address)': FunctionFragment
    'getNFTCollection(address,address,address)': FunctionFragment
    'getNFTCollectionStaus(address,address,address,address)': FunctionFragment
    'getNFTCollections(address[],address,address)': FunctionFragment
    'getNFTCollectionsStaus(address[],address,address,address)': FunctionFragment
    'getPosition(address,uint256)': FunctionFragment
    'getVault(address,address,address)': FunctionFragment
    'getVaultWithUser(address,address,address,address)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'getAnalytics'
      | 'getNFTCollection'
      | 'getNFTCollectionStaus'
      | 'getNFTCollections'
      | 'getNFTCollectionsStaus'
      | 'getPosition'
      | 'getVault'
      | 'getVaultWithUser'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'getAnalytics', values: [string, string]): string
  encodeFunctionData(functionFragment: 'getNFTCollection', values: [string, string, string]): string
  encodeFunctionData(functionFragment: 'getNFTCollectionStaus', values: [string, string, string, string]): string
  encodeFunctionData(functionFragment: 'getNFTCollections', values: [string[], string, string]): string
  encodeFunctionData(functionFragment: 'getNFTCollectionsStaus', values: [string[], string, string, string]): string
  encodeFunctionData(functionFragment: 'getPosition', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'getVault', values: [string, string, string]): string
  encodeFunctionData(functionFragment: 'getVaultWithUser', values: [string, string, string, string]): string

  decodeFunctionResult(functionFragment: 'getAnalytics', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNFTCollection', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNFTCollectionStaus', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNFTCollections', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNFTCollectionsStaus', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPosition', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getVault', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getVaultWithUser', data: BytesLike): Result

  events: {}
}

export interface SurgeUI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: SurgeUIInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    getAnalytics(
      vaultAddress: string,
      lpTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[AnalyticsStructOutput]>

    getNFTCollection(
      collectionAddress: string,
      oracleAddress: string,
      vaultAddress: string,
      overrides?: CallOverrides
    ): Promise<[NFTCollectionStructOutput]>

    getNFTCollectionStaus(
      collectionAddress: string,
      oracleAddress: string,
      vaultAddress: string,
      riskCacheAddress: string,
      overrides?: CallOverrides
    ): Promise<[NFTCollectionStausStructOutput]>

    getNFTCollections(
      collectionAddresses: string[],
      oracleAddress: string,
      vaultAddress: string,
      overrides?: CallOverrides
    ): Promise<[NFTCollectionStructOutput[]]>

    getNFTCollectionsStaus(
      collectionAddresses: string[],
      oracleAddress: string,
      vaultAddress: string,
      riskCacheAddress: string,
      overrides?: CallOverrides
    ): Promise<[NFTCollectionStausStructOutput[]]>

    getPosition(
      optionTokenAddress: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[OptionPositionStructOutput]>

    getVault(
      vaultAddress: string,
      lpTokenAddress: string,
      wETHAddress: string,
      overrides?: CallOverrides
    ): Promise<[VaultStructOutput]>

    getVaultWithUser(
      vaultAddress: string,
      lpTokenAddress: string,
      wETHAddress: string,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[VaultStructOutput]>
  }

  getAnalytics(vaultAddress: string, lpTokenAddress: string, overrides?: CallOverrides): Promise<AnalyticsStructOutput>

  getNFTCollection(
    collectionAddress: string,
    oracleAddress: string,
    vaultAddress: string,
    overrides?: CallOverrides
  ): Promise<NFTCollectionStructOutput>

  getNFTCollectionStaus(
    collectionAddress: string,
    oracleAddress: string,
    vaultAddress: string,
    riskCacheAddress: string,
    overrides?: CallOverrides
  ): Promise<NFTCollectionStausStructOutput>

  getNFTCollections(
    collectionAddresses: string[],
    oracleAddress: string,
    vaultAddress: string,
    overrides?: CallOverrides
  ): Promise<NFTCollectionStructOutput[]>

  getNFTCollectionsStaus(
    collectionAddresses: string[],
    oracleAddress: string,
    vaultAddress: string,
    riskCacheAddress: string,
    overrides?: CallOverrides
  ): Promise<NFTCollectionStausStructOutput[]>

  getPosition(
    optionTokenAddress: string,
    positionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OptionPositionStructOutput>

  getVault(
    vaultAddress: string,
    lpTokenAddress: string,
    wETHAddress: string,
    overrides?: CallOverrides
  ): Promise<VaultStructOutput>

  getVaultWithUser(
    vaultAddress: string,
    lpTokenAddress: string,
    wETHAddress: string,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<VaultStructOutput>

  callStatic: {
    getAnalytics(
      vaultAddress: string,
      lpTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<AnalyticsStructOutput>

    getNFTCollection(
      collectionAddress: string,
      oracleAddress: string,
      vaultAddress: string,
      overrides?: CallOverrides
    ): Promise<NFTCollectionStructOutput>

    getNFTCollectionStaus(
      collectionAddress: string,
      oracleAddress: string,
      vaultAddress: string,
      riskCacheAddress: string,
      overrides?: CallOverrides
    ): Promise<NFTCollectionStausStructOutput>

    getNFTCollections(
      collectionAddresses: string[],
      oracleAddress: string,
      vaultAddress: string,
      overrides?: CallOverrides
    ): Promise<NFTCollectionStructOutput[]>

    getNFTCollectionsStaus(
      collectionAddresses: string[],
      oracleAddress: string,
      vaultAddress: string,
      riskCacheAddress: string,
      overrides?: CallOverrides
    ): Promise<NFTCollectionStausStructOutput[]>

    getPosition(
      optionTokenAddress: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OptionPositionStructOutput>

    getVault(
      vaultAddress: string,
      lpTokenAddress: string,
      wETHAddress: string,
      overrides?: CallOverrides
    ): Promise<VaultStructOutput>

    getVaultWithUser(
      vaultAddress: string,
      lpTokenAddress: string,
      wETHAddress: string,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<VaultStructOutput>
  }

  filters: {}

  estimateGas: {
    getAnalytics(vaultAddress: string, lpTokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    getNFTCollection(
      collectionAddress: string,
      oracleAddress: string,
      vaultAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNFTCollectionStaus(
      collectionAddress: string,
      oracleAddress: string,
      vaultAddress: string,
      riskCacheAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNFTCollections(
      collectionAddresses: string[],
      oracleAddress: string,
      vaultAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNFTCollectionsStaus(
      collectionAddresses: string[],
      oracleAddress: string,
      vaultAddress: string,
      riskCacheAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPosition(optionTokenAddress: string, positionId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getVault(
      vaultAddress: string,
      lpTokenAddress: string,
      wETHAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getVaultWithUser(
      vaultAddress: string,
      lpTokenAddress: string,
      wETHAddress: string,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    getAnalytics(vaultAddress: string, lpTokenAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getNFTCollection(
      collectionAddress: string,
      oracleAddress: string,
      vaultAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNFTCollectionStaus(
      collectionAddress: string,
      oracleAddress: string,
      vaultAddress: string,
      riskCacheAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNFTCollections(
      collectionAddresses: string[],
      oracleAddress: string,
      vaultAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNFTCollectionsStaus(
      collectionAddresses: string[],
      oracleAddress: string,
      vaultAddress: string,
      riskCacheAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getPosition(
      optionTokenAddress: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getVault(
      vaultAddress: string,
      lpTokenAddress: string,
      wETHAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getVaultWithUser(
      vaultAddress: string,
      lpTokenAddress: string,
      wETHAddress: string,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
