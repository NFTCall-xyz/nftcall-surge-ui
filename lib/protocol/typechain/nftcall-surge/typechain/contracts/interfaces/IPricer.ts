/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from '../../common'

export declare namespace BlackScholes {
  export type PricesDeltaStdVegaStruct = {
    callPrice: PromiseOrValue<BigNumberish>
    putPrice: PromiseOrValue<BigNumberish>
    callDelta: PromiseOrValue<BigNumberish>
    putDelta: PromiseOrValue<BigNumberish>
    vega: PromiseOrValue<BigNumberish>
    stdVega: PromiseOrValue<BigNumberish>
  }

  export type PricesDeltaStdVegaStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    callPrice: BigNumber
    putPrice: BigNumber
    callDelta: BigNumber
    putDelta: BigNumber
    vega: BigNumber
    stdVega: BigNumber
  }
}

export interface IPricerInterface extends utils.Interface {
  functions: {
    'delta(uint256,uint256,uint256,uint256)': FunctionFragment
    'getAdjustedVol(address,uint8,uint256)': FunctionFragment
    'getPremiumDeltaStdVega(uint8,uint256,uint256,uint256,uint256)': FunctionFragment
    'optionPrices(uint256,uint256,uint256,uint256)': FunctionFragment
    'optionPricesDeltaStdVega(uint256,uint256,uint256,uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'delta'
      | 'getAdjustedVol'
      | 'getPremiumDeltaStdVega'
      | 'optionPrices'
      | 'optionPricesDeltaStdVega'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'delta',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'getAdjustedVol',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getPremiumDeltaStdVega',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'optionPrices',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'optionPricesDeltaStdVega',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string

  decodeFunctionResult(functionFragment: 'delta', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAdjustedVol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPremiumDeltaStdVega', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'optionPrices', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'optionPricesDeltaStdVega', data: BytesLike): Result

  events: {}
}

export interface IPricer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IPricerInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    delta(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      vol: PromiseOrValue<BigNumberish>,
      druation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { callDelta: BigNumber; putDelta: BigNumber }>

    getAdjustedVol(
      asset: PromiseOrValue<string>,
      ot: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { adjustedVol: BigNumber }>

    getPremiumDeltaStdVega(
      optionType: PromiseOrValue<BigNumberish>,
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      vol: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        premium: BigNumber
        delta: BigNumber
        vega: BigNumber
        stdVega: BigNumber
      }
    >

    optionPrices(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      vol: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { call: BigNumber; put: BigNumber }>

    optionPricesDeltaStdVega(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      vol: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BlackScholes.PricesDeltaStdVegaStructOutput]>
  }

  delta(
    S: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    vol: PromiseOrValue<BigNumberish>,
    druation: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { callDelta: BigNumber; putDelta: BigNumber }>

  getAdjustedVol(
    asset: PromiseOrValue<string>,
    ot: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getPremiumDeltaStdVega(
    optionType: PromiseOrValue<BigNumberish>,
    S: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    vol: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      premium: BigNumber
      delta: BigNumber
      vega: BigNumber
      stdVega: BigNumber
    }
  >

  optionPrices(
    S: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    vol: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { call: BigNumber; put: BigNumber }>

  optionPricesDeltaStdVega(
    S: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    vol: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BlackScholes.PricesDeltaStdVegaStructOutput>

  callStatic: {
    delta(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      vol: PromiseOrValue<BigNumberish>,
      druation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { callDelta: BigNumber; putDelta: BigNumber }>

    getAdjustedVol(
      asset: PromiseOrValue<string>,
      ot: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPremiumDeltaStdVega(
      optionType: PromiseOrValue<BigNumberish>,
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      vol: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        premium: BigNumber
        delta: BigNumber
        vega: BigNumber
        stdVega: BigNumber
      }
    >

    optionPrices(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      vol: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { call: BigNumber; put: BigNumber }>

    optionPricesDeltaStdVega(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      vol: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BlackScholes.PricesDeltaStdVegaStructOutput>
  }

  filters: {}

  estimateGas: {
    delta(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      vol: PromiseOrValue<BigNumberish>,
      druation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAdjustedVol(
      asset: PromiseOrValue<string>,
      ot: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPremiumDeltaStdVega(
      optionType: PromiseOrValue<BigNumberish>,
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      vol: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    optionPrices(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      vol: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    optionPricesDeltaStdVega(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      vol: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    delta(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      vol: PromiseOrValue<BigNumberish>,
      druation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAdjustedVol(
      asset: PromiseOrValue<string>,
      ot: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getPremiumDeltaStdVega(
      optionType: PromiseOrValue<BigNumberish>,
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      vol: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    optionPrices(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      vol: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    optionPricesDeltaStdVega(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      vol: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
