/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from '../../common'

export type StrikeStruct = {
  entryPrice: BigNumberish
  strikePrice: BigNumberish
  duration: BigNumberish
  expiry: BigNumberish
}

export type StrikeStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
  entryPrice: BigNumber
  strikePrice: BigNumber
  duration: BigNumber
  expiry: BigNumber
}

export declare namespace IVault {
  export type OpenPositionEventParametersStruct = {
    optionType: BigNumberish
    expiration: BigNumberish
    entryPrice: BigNumberish
    strikePrice: BigNumberish
    amount: BigNumberish
    premium: BigNumberish
    keeperFee: BigNumberish
  }

  export type OpenPositionEventParametersStructOutput = [
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    optionType: number
    expiration: BigNumber
    entryPrice: BigNumber
    strikePrice: BigNumber
    amount: BigNumber
    premium: BigNumber
    keeperFee: BigNumber
  }

  export type CollectionConfigurationStruct = {
    frozen: boolean
    activated: boolean
    id: BigNumberish
    weight: BigNumberish
    optionToken: string
  }

  export type CollectionConfigurationStructOutput = [boolean, boolean, number, number, string] & {
    frozen: boolean
    activated: boolean
    id: number
    weight: number
    optionToken: string
  }
}

export interface VaultInterface extends utils.Interface {
  functions: {
    'KEEPER_FEE()': FunctionFragment
    'MAXIMUM_CALL_STRIKE_PRICE_RATIO()': FunctionFragment
    'MAXIMUM_DURATION()': FunctionFragment
    'MAXIMUM_LOCK_RATIO()': FunctionFragment
    'MAXIMUM_PUT_STRIKE_PRICE_RATIO()': FunctionFragment
    'MINIMUM_CALL_STRIKE_PRICE_RATIO()': FunctionFragment
    'MINIMUM_DURATION()': FunctionFragment
    'MINIMUM_PUT_STRIKE_PRICE_RATIO()': FunctionFragment
    'RESERVE_RATIO()': FunctionFragment
    'TIME_SCALE()': FunctionFragment
    'activateMarket(address)': FunctionFragment
    'activatePosition(address,uint256)': FunctionFragment
    'addMarket(address,uint32,address)': FunctionFragment
    'adjustedVolatility(address,uint8,uint256,uint256)': FunctionFragment
    'backstopPool()': FunctionFragment
    'closePosition(address,uint256)': FunctionFragment
    'collectUntitledAssetsFromLPToken(address)': FunctionFragment
    'deactivateMarket(address)': FunctionFragment
    'decimals()': FunctionFragment
    'defreezeMarket(address)': FunctionFragment
    'deposit(uint256,address)': FunctionFragment
    'estimatePremium(address,uint8,uint256,uint256,uint256)': FunctionFragment
    'feeRatio()': FunctionFragment
    'forceClosePendingPosition(address,uint256)': FunctionFragment
    'freezeMarket(address)': FunctionFragment
    'isActiveMarket(address)': FunctionFragment
    'isFrozenMarket(address)': FunctionFragment
    'isPaused()': FunctionFragment
    'keeper()': FunctionFragment
    'marketConfiguration(address)': FunctionFragment
    'markets()': FunctionFragment
    'maximumOptionAmount(address,uint8)': FunctionFragment
    'minimumAnnualRateOfReturnOnLockedAssets()': FunctionFragment
    'minimumPremium(address,uint8,uint256,uint256,uint256)': FunctionFragment
    'openPosition(address,address,uint8,uint256,uint256,uint256,uint256)': FunctionFragment
    'owner()': FunctionFragment
    'pause()': FunctionFragment
    'paused()': FunctionFragment
    'positionPNLWeightedDelta(address,uint256)': FunctionFragment
    'profitFeeRatio()': FunctionFragment
    'redeem(uint256,address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'reserve()': FunctionFragment
    'sendAssetsToLPToken(uint256)': FunctionFragment
    'setCallStrikePriceRatioRange(uint256,uint256)': FunctionFragment
    'setDurationRange(uint256,uint256)': FunctionFragment
    'setKeeper(address)': FunctionFragment
    'setMinimumAnnualRateOfReturnOnLockedAssets(uint256)': FunctionFragment
    'setPutStrikePriceRatioRange(uint256,uint256)': FunctionFragment
    'setTimeWindowForActivation(uint256)': FunctionFragment
    'strike(uint256)': FunctionFragment
    'timeWindowForActivation()': FunctionFragment
    'totalAssets()': FunctionFragment
    'totalLockedAssets()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unpause()': FunctionFragment
    'unrealizedPNL()': FunctionFragment
    'unrealizedPremium()': FunctionFragment
    'updateCollectionRisk(address,int256,int256)': FunctionFragment
    'updateUnrealizedPNL()': FunctionFragment
    'withdraw(uint256,address)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'KEEPER_FEE'
      | 'MAXIMUM_CALL_STRIKE_PRICE_RATIO'
      | 'MAXIMUM_DURATION'
      | 'MAXIMUM_LOCK_RATIO'
      | 'MAXIMUM_PUT_STRIKE_PRICE_RATIO'
      | 'MINIMUM_CALL_STRIKE_PRICE_RATIO'
      | 'MINIMUM_DURATION'
      | 'MINIMUM_PUT_STRIKE_PRICE_RATIO'
      | 'RESERVE_RATIO'
      | 'TIME_SCALE'
      | 'activateMarket'
      | 'activatePosition'
      | 'addMarket'
      | 'adjustedVolatility'
      | 'backstopPool'
      | 'closePosition'
      | 'collectUntitledAssetsFromLPToken'
      | 'deactivateMarket'
      | 'decimals'
      | 'defreezeMarket'
      | 'deposit'
      | 'estimatePremium'
      | 'feeRatio'
      | 'forceClosePendingPosition'
      | 'freezeMarket'
      | 'isActiveMarket'
      | 'isFrozenMarket'
      | 'isPaused'
      | 'keeper'
      | 'marketConfiguration'
      | 'markets'
      | 'maximumOptionAmount'
      | 'minimumAnnualRateOfReturnOnLockedAssets'
      | 'minimumPremium'
      | 'openPosition'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'positionPNLWeightedDelta'
      | 'profitFeeRatio'
      | 'redeem'
      | 'renounceOwnership'
      | 'reserve'
      | 'sendAssetsToLPToken'
      | 'setCallStrikePriceRatioRange'
      | 'setDurationRange'
      | 'setKeeper'
      | 'setMinimumAnnualRateOfReturnOnLockedAssets'
      | 'setPutStrikePriceRatioRange'
      | 'setTimeWindowForActivation'
      | 'strike'
      | 'timeWindowForActivation'
      | 'totalAssets'
      | 'totalLockedAssets'
      | 'transferOwnership'
      | 'unpause'
      | 'unrealizedPNL'
      | 'unrealizedPremium'
      | 'updateCollectionRisk'
      | 'updateUnrealizedPNL'
      | 'withdraw'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'KEEPER_FEE', values?: undefined): string
  encodeFunctionData(functionFragment: 'MAXIMUM_CALL_STRIKE_PRICE_RATIO', values?: undefined): string
  encodeFunctionData(functionFragment: 'MAXIMUM_DURATION', values?: undefined): string
  encodeFunctionData(functionFragment: 'MAXIMUM_LOCK_RATIO', values?: undefined): string
  encodeFunctionData(functionFragment: 'MAXIMUM_PUT_STRIKE_PRICE_RATIO', values?: undefined): string
  encodeFunctionData(functionFragment: 'MINIMUM_CALL_STRIKE_PRICE_RATIO', values?: undefined): string
  encodeFunctionData(functionFragment: 'MINIMUM_DURATION', values?: undefined): string
  encodeFunctionData(functionFragment: 'MINIMUM_PUT_STRIKE_PRICE_RATIO', values?: undefined): string
  encodeFunctionData(functionFragment: 'RESERVE_RATIO', values?: undefined): string
  encodeFunctionData(functionFragment: 'TIME_SCALE', values?: undefined): string
  encodeFunctionData(functionFragment: 'activateMarket', values: [string]): string
  encodeFunctionData(functionFragment: 'activatePosition', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'addMarket', values: [string, BigNumberish, string]): string
  encodeFunctionData(
    functionFragment: 'adjustedVolatility',
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'backstopPool', values?: undefined): string
  encodeFunctionData(functionFragment: 'closePosition', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'collectUntitledAssetsFromLPToken', values: [string]): string
  encodeFunctionData(functionFragment: 'deactivateMarket', values: [string]): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(functionFragment: 'defreezeMarket', values: [string]): string
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, string]): string
  encodeFunctionData(
    functionFragment: 'estimatePremium',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'feeRatio', values?: undefined): string
  encodeFunctionData(functionFragment: 'forceClosePendingPosition', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'freezeMarket', values: [string]): string
  encodeFunctionData(functionFragment: 'isActiveMarket', values: [string]): string
  encodeFunctionData(functionFragment: 'isFrozenMarket', values: [string]): string
  encodeFunctionData(functionFragment: 'isPaused', values?: undefined): string
  encodeFunctionData(functionFragment: 'keeper', values?: undefined): string
  encodeFunctionData(functionFragment: 'marketConfiguration', values: [string]): string
  encodeFunctionData(functionFragment: 'markets', values?: undefined): string
  encodeFunctionData(functionFragment: 'maximumOptionAmount', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'minimumAnnualRateOfReturnOnLockedAssets', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'minimumPremium',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'openPosition',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(functionFragment: 'positionPNLWeightedDelta', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'profitFeeRatio', values?: undefined): string
  encodeFunctionData(functionFragment: 'redeem', values: [BigNumberish, string]): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'reserve', values?: undefined): string
  encodeFunctionData(functionFragment: 'sendAssetsToLPToken', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setCallStrikePriceRatioRange', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'setDurationRange', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'setKeeper', values: [string]): string
  encodeFunctionData(functionFragment: 'setMinimumAnnualRateOfReturnOnLockedAssets', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setPutStrikePriceRatioRange', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'setTimeWindowForActivation', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'strike', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'timeWindowForActivation', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalAssets', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalLockedAssets', values?: undefined): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
  encodeFunctionData(functionFragment: 'unrealizedPNL', values?: undefined): string
  encodeFunctionData(functionFragment: 'unrealizedPremium', values?: undefined): string
  encodeFunctionData(functionFragment: 'updateCollectionRisk', values: [string, BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'updateUnrealizedPNL', values?: undefined): string
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, string]): string

  decodeFunctionResult(functionFragment: 'KEEPER_FEE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MAXIMUM_CALL_STRIKE_PRICE_RATIO', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MAXIMUM_DURATION', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MAXIMUM_LOCK_RATIO', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MAXIMUM_PUT_STRIKE_PRICE_RATIO', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MINIMUM_CALL_STRIKE_PRICE_RATIO', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MINIMUM_DURATION', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MINIMUM_PUT_STRIKE_PRICE_RATIO', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'RESERVE_RATIO', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'TIME_SCALE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'activateMarket', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'activatePosition', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addMarket', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'adjustedVolatility', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'backstopPool', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'closePosition', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'collectUntitledAssetsFromLPToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deactivateMarket', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'defreezeMarket', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'estimatePremium', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'feeRatio', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'forceClosePendingPosition', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'freezeMarket', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isActiveMarket', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isFrozenMarket', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isPaused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'keeper', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'marketConfiguration', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'markets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maximumOptionAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'minimumAnnualRateOfReturnOnLockedAssets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'minimumPremium', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'openPosition', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'positionPNLWeightedDelta', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'profitFeeRatio', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'reserve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sendAssetsToLPToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setCallStrikePriceRatioRange', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setDurationRange', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setKeeper', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMinimumAnnualRateOfReturnOnLockedAssets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setPutStrikePriceRatioRange', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setTimeWindowForActivation', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'strike', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'timeWindowForActivation', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalLockedAssets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unrealizedPNL', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unrealizedPremium', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateCollectionRisk', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateUnrealizedPNL', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'ActivateMarket(address,address)': EventFragment
    'ActivatePosition(address,address,uint256,uint256,uint256,int256)': EventFragment
    'CancelPosition(address,address,uint256,uint256)': EventFragment
    'CreateMarket(address,uint32,address)': EventFragment
    'CreateStrike(uint256,uint256,uint256,uint256,uint256)': EventFragment
    'DeactivateMarket(address,address)': EventFragment
    'DefreezeMarket(address,address)': EventFragment
    'DestoryStrike(uint256)': EventFragment
    'ExercisePosition(address,address,uint256,uint256,uint256,uint256)': EventFragment
    'ExpirePosition(address,address,uint256,uint256)': EventFragment
    'FailPosition(address,address,uint256,uint256,uint8)': EventFragment
    'FreezeMarket(address,address)': EventFragment
    'OpenPosition(address,address,address,uint256,(uint8,uint256,uint256,uint256,uint256,uint256,uint256))': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'PauseVault(address)': EventFragment
    'Paused(address)': EventFragment
    'SendAssetsToLPToken(address,uint256)': EventFragment
    'UnpauseVault(address)': EventFragment
    'Unpaused(address)': EventFragment
    'UpdateCallStrikePriceRatioRange(address,uint256,uint256)': EventFragment
    'UpdateDurationRange(address,uint256,uint256)': EventFragment
    'UpdateKeeper(address,address)': EventFragment
    'UpdateLPTokenPrice(address,uint256)': EventFragment
    'UpdateMinimumAnnualRateOfReturnOnLockedAssets(address,uint256)': EventFragment
    'UpdatePutStrikePriceRatioRange(address,uint256,uint256)': EventFragment
    'UpdateTimeWindowForActivation(address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'ActivateMarket'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ActivatePosition'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CancelPosition'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CreateMarket'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CreateStrike'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DeactivateMarket'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DefreezeMarket'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DestoryStrike'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ExercisePosition'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ExpirePosition'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FailPosition'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FreezeMarket'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OpenPosition'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PauseVault'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SendAssetsToLPToken'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UnpauseVault'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateCallStrikePriceRatioRange'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateDurationRange'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateKeeper'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateLPTokenPrice'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateMinimumAnnualRateOfReturnOnLockedAssets'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdatePutStrikePriceRatioRange'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateTimeWindowForActivation'): EventFragment
}

export interface ActivateMarketEventObject {
  operator: string
  collection: string
}
export type ActivateMarketEvent = TypedEvent<[string, string], ActivateMarketEventObject>

export type ActivateMarketEventFilter = TypedEventFilter<ActivateMarketEvent>

export interface ActivatePositionEventObject {
  owner: string
  collection: string
  positionId: BigNumber
  premium: BigNumber
  excessPremium: BigNumber
  delta: BigNumber
}
export type ActivatePositionEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  ActivatePositionEventObject
>

export type ActivatePositionEventFilter = TypedEventFilter<ActivatePositionEvent>

export interface CancelPositionEventObject {
  owner: string
  collection: string
  positionId: BigNumber
  returnedPremium: BigNumber
}
export type CancelPositionEvent = TypedEvent<[string, string, BigNumber, BigNumber], CancelPositionEventObject>

export type CancelPositionEventFilter = TypedEventFilter<CancelPositionEvent>

export interface CreateMarketEventObject {
  collection: string
  weight: number
  optionToken: string
}
export type CreateMarketEvent = TypedEvent<[string, number, string], CreateMarketEventObject>

export type CreateMarketEventFilter = TypedEventFilter<CreateMarketEvent>

export interface CreateStrikeEventObject {
  strikeId: BigNumber
  duration: BigNumber
  expiration: BigNumber
  entryPrice: BigNumber
  strikePrice: BigNumber
}
export type CreateStrikeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  CreateStrikeEventObject
>

export type CreateStrikeEventFilter = TypedEventFilter<CreateStrikeEvent>

export interface DeactivateMarketEventObject {
  operator: string
  collection: string
}
export type DeactivateMarketEvent = TypedEvent<[string, string], DeactivateMarketEventObject>

export type DeactivateMarketEventFilter = TypedEventFilter<DeactivateMarketEvent>

export interface DefreezeMarketEventObject {
  operator: string
  collection: string
}
export type DefreezeMarketEvent = TypedEvent<[string, string], DefreezeMarketEventObject>

export type DefreezeMarketEventFilter = TypedEventFilter<DefreezeMarketEvent>

export interface DestoryStrikeEventObject {
  strikeId: BigNumber
}
export type DestoryStrikeEvent = TypedEvent<[BigNumber], DestoryStrikeEventObject>

export type DestoryStrikeEventFilter = TypedEventFilter<DestoryStrikeEvent>

export interface ExercisePositionEventObject {
  owner: string
  collection: string
  positionId: BigNumber
  revenue: BigNumber
  exerciseFee: BigNumber
  settlementPrice: BigNumber
}
export type ExercisePositionEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  ExercisePositionEventObject
>

export type ExercisePositionEventFilter = TypedEventFilter<ExercisePositionEvent>

export interface ExpirePositionEventObject {
  owner: string
  collection: string
  positionId: BigNumber
  settlementPrice: BigNumber
}
export type ExpirePositionEvent = TypedEvent<[string, string, BigNumber, BigNumber], ExpirePositionEventObject>

export type ExpirePositionEventFilter = TypedEventFilter<ExpirePositionEvent>

export interface FailPositionEventObject {
  owner: string
  collection: string
  positionId: BigNumber
  returnedPremium: BigNumber
  reason: number
}
export type FailPositionEvent = TypedEvent<[string, string, BigNumber, BigNumber, number], FailPositionEventObject>

export type FailPositionEventFilter = TypedEventFilter<FailPositionEvent>

export interface FreezeMarketEventObject {
  operator: string
  collection: string
}
export type FreezeMarketEvent = TypedEvent<[string, string], FreezeMarketEventObject>

export type FreezeMarketEventFilter = TypedEventFilter<FreezeMarketEvent>

export interface OpenPositionEventObject {
  caller: string
  receiver: string
  collection: string
  positionId: BigNumber
  parameters: IVault.OpenPositionEventParametersStructOutput
}
export type OpenPositionEvent = TypedEvent<
  [string, string, string, BigNumber, IVault.OpenPositionEventParametersStructOutput],
  OpenPositionEventObject
>

export type OpenPositionEventFilter = TypedEventFilter<OpenPositionEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PauseVaultEventObject {
  operator: string
}
export type PauseVaultEvent = TypedEvent<[string], PauseVaultEventObject>

export type PauseVaultEventFilter = TypedEventFilter<PauseVaultEvent>

export interface PausedEventObject {
  account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface SendAssetsToLPTokenEventObject {
  operator: string
  amount: BigNumber
}
export type SendAssetsToLPTokenEvent = TypedEvent<[string, BigNumber], SendAssetsToLPTokenEventObject>

export type SendAssetsToLPTokenEventFilter = TypedEventFilter<SendAssetsToLPTokenEvent>

export interface UnpauseVaultEventObject {
  operator: string
}
export type UnpauseVaultEvent = TypedEvent<[string], UnpauseVaultEventObject>

export type UnpauseVaultEventFilter = TypedEventFilter<UnpauseVaultEvent>

export interface UnpausedEventObject {
  account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface UpdateCallStrikePriceRatioRangeEventObject {
  operator: string
  minimumRatio: BigNumber
  maximumRatio: BigNumber
}
export type UpdateCallStrikePriceRatioRangeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  UpdateCallStrikePriceRatioRangeEventObject
>

export type UpdateCallStrikePriceRatioRangeEventFilter = TypedEventFilter<UpdateCallStrikePriceRatioRangeEvent>

export interface UpdateDurationRangeEventObject {
  operator: string
  minimumDuration: BigNumber
  maximumDuration: BigNumber
}
export type UpdateDurationRangeEvent = TypedEvent<[string, BigNumber, BigNumber], UpdateDurationRangeEventObject>

export type UpdateDurationRangeEventFilter = TypedEventFilter<UpdateDurationRangeEvent>

export interface UpdateKeeperEventObject {
  operator: string
  keeperAddress: string
}
export type UpdateKeeperEvent = TypedEvent<[string, string], UpdateKeeperEventObject>

export type UpdateKeeperEventFilter = TypedEventFilter<UpdateKeeperEvent>

export interface UpdateLPTokenPriceEventObject {
  lpToken: string
  newPrice: BigNumber
}
export type UpdateLPTokenPriceEvent = TypedEvent<[string, BigNumber], UpdateLPTokenPriceEventObject>

export type UpdateLPTokenPriceEventFilter = TypedEventFilter<UpdateLPTokenPriceEvent>

export interface UpdateMinimumAnnualRateOfReturnOnLockedAssetsEventObject {
  operator: string
  ratio: BigNumber
}
export type UpdateMinimumAnnualRateOfReturnOnLockedAssetsEvent = TypedEvent<
  [string, BigNumber],
  UpdateMinimumAnnualRateOfReturnOnLockedAssetsEventObject
>

export type UpdateMinimumAnnualRateOfReturnOnLockedAssetsEventFilter =
  TypedEventFilter<UpdateMinimumAnnualRateOfReturnOnLockedAssetsEvent>

export interface UpdatePutStrikePriceRatioRangeEventObject {
  operator: string
  minimumRatio: BigNumber
  maximumRatio: BigNumber
}
export type UpdatePutStrikePriceRatioRangeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  UpdatePutStrikePriceRatioRangeEventObject
>

export type UpdatePutStrikePriceRatioRangeEventFilter = TypedEventFilter<UpdatePutStrikePriceRatioRangeEvent>

export interface UpdateTimeWindowForActivationEventObject {
  operator: string
  timeWindows: BigNumber
}
export type UpdateTimeWindowForActivationEvent = TypedEvent<
  [string, BigNumber],
  UpdateTimeWindowForActivationEventObject
>

export type UpdateTimeWindowForActivationEventFilter = TypedEventFilter<UpdateTimeWindowForActivationEvent>

export interface Vault extends BaseContract {
  contractName: 'Vault'

  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: VaultInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    KEEPER_FEE(overrides?: CallOverrides): Promise<[BigNumber]>

    MAXIMUM_CALL_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>

    MAXIMUM_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>

    MAXIMUM_LOCK_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>

    MAXIMUM_PUT_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>

    MINIMUM_CALL_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>

    MINIMUM_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>

    MINIMUM_PUT_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>

    RESERVE_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>

    TIME_SCALE(overrides?: CallOverrides): Promise<[BigNumber]>

    activateMarket(collection: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    activatePosition(
      collection: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    addMarket(
      collection: string,
      weight: BigNumberish,
      optionToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    adjustedVolatility(
      collection: string,
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { adjustedVol: BigNumber }>

    backstopPool(overrides?: CallOverrides): Promise<[string]>

    closePosition(
      collection: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    collectUntitledAssetsFromLPToken(
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    deactivateMarket(collection: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    decimals(overrides?: CallOverrides): Promise<[number]>

    defreezeMarket(collection: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    deposit(
      amount: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    estimatePremium(
      collection: string,
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { premium: BigNumber }>

    feeRatio(overrides?: CallOverrides): Promise<[BigNumber]>

    forceClosePendingPosition(
      collection: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    freezeMarket(collection: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    isActiveMarket(collection: string, overrides?: CallOverrides): Promise<[boolean]>

    isFrozenMarket(collection: string, overrides?: CallOverrides): Promise<[boolean]>

    isPaused(overrides?: CallOverrides): Promise<[boolean]>

    keeper(overrides?: CallOverrides): Promise<[string]>

    marketConfiguration(
      collection: string,
      overrides?: CallOverrides
    ): Promise<[IVault.CollectionConfigurationStructOutput]>

    markets(overrides?: CallOverrides): Promise<[string[]]>

    maximumOptionAmount(
      collection: string,
      optionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>

    minimumAnnualRateOfReturnOnLockedAssets(overrides?: CallOverrides): Promise<[BigNumber]>

    minimumPremium(
      collection: string,
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    openPosition(
      collection: string,
      onBehalfOf: string,
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      amount: BigNumberish,
      maximumPremium: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    pause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    positionPNLWeightedDelta(
      collection: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        unrealizePNL: BigNumber
        weightedDelta: BigNumber
      }
    >

    profitFeeRatio(overrides?: CallOverrides): Promise<[BigNumber]>

    redeem(amount: BigNumberish, to: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    reserve(overrides?: CallOverrides): Promise<[string]>

    sendAssetsToLPToken(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    setCallStrikePriceRatioRange(
      minimumRatio: BigNumberish,
      maximumRatio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    setDurationRange(
      minimumDuration: BigNumberish,
      maximumDuration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    setKeeper(keeperAddress: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    setMinimumAnnualRateOfReturnOnLockedAssets(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    setPutStrikePriceRatioRange(
      minimumRatio: BigNumberish,
      maximumRatio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    setTimeWindowForActivation(
      timeWindows: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    strike(strikeId: BigNumberish, overrides?: CallOverrides): Promise<[StrikeStructOutput] & { s: StrikeStructOutput }>

    timeWindowForActivation(overrides?: CallOverrides): Promise<[BigNumber]>

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>

    totalLockedAssets(overrides?: CallOverrides): Promise<[BigNumber]>

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    unpause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    unrealizedPNL(overrides?: CallOverrides): Promise<[BigNumber]>

    unrealizedPremium(overrides?: CallOverrides): Promise<[BigNumber]>

    updateCollectionRisk(
      collection: string,
      delta: BigNumberish,
      PNL: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    updateUnrealizedPNL(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    withdraw(amount: BigNumberish, to: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>
  }

  KEEPER_FEE(overrides?: CallOverrides): Promise<BigNumber>

  MAXIMUM_CALL_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

  MAXIMUM_DURATION(overrides?: CallOverrides): Promise<BigNumber>

  MAXIMUM_LOCK_RATIO(overrides?: CallOverrides): Promise<BigNumber>

  MAXIMUM_PUT_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

  MINIMUM_CALL_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

  MINIMUM_DURATION(overrides?: CallOverrides): Promise<BigNumber>

  MINIMUM_PUT_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

  RESERVE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

  TIME_SCALE(overrides?: CallOverrides): Promise<BigNumber>

  activateMarket(collection: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  activatePosition(
    collection: string,
    positionId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  addMarket(
    collection: string,
    weight: BigNumberish,
    optionToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  adjustedVolatility(
    collection: string,
    optionType: BigNumberish,
    strikePrice: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  backstopPool(overrides?: CallOverrides): Promise<string>

  closePosition(
    collection: string,
    positionId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  collectUntitledAssetsFromLPToken(
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  deactivateMarket(collection: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  decimals(overrides?: CallOverrides): Promise<number>

  defreezeMarket(collection: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  deposit(
    amount: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  estimatePremium(
    collection: string,
    optionType: BigNumberish,
    strikePrice: BigNumberish,
    expiry: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  feeRatio(overrides?: CallOverrides): Promise<BigNumber>

  forceClosePendingPosition(
    collection: string,
    positionId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  freezeMarket(collection: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  isActiveMarket(collection: string, overrides?: CallOverrides): Promise<boolean>

  isFrozenMarket(collection: string, overrides?: CallOverrides): Promise<boolean>

  isPaused(overrides?: CallOverrides): Promise<boolean>

  keeper(overrides?: CallOverrides): Promise<string>

  marketConfiguration(
    collection: string,
    overrides?: CallOverrides
  ): Promise<IVault.CollectionConfigurationStructOutput>

  markets(overrides?: CallOverrides): Promise<string[]>

  maximumOptionAmount(collection: string, optionType: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  minimumAnnualRateOfReturnOnLockedAssets(overrides?: CallOverrides): Promise<BigNumber>

  minimumPremium(
    collection: string,
    optionType: BigNumberish,
    strikePrice: BigNumberish,
    expiry: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  openPosition(
    collection: string,
    onBehalfOf: string,
    optionType: BigNumberish,
    strikePrice: BigNumberish,
    expiry: BigNumberish,
    amount: BigNumberish,
    maximumPremium: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  pause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  positionPNLWeightedDelta(
    collection: string,
    positionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      unrealizePNL: BigNumber
      weightedDelta: BigNumber
    }
  >

  profitFeeRatio(overrides?: CallOverrides): Promise<BigNumber>

  redeem(amount: BigNumberish, to: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  reserve(overrides?: CallOverrides): Promise<string>

  sendAssetsToLPToken(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  setCallStrikePriceRatioRange(
    minimumRatio: BigNumberish,
    maximumRatio: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  setDurationRange(
    minimumDuration: BigNumberish,
    maximumDuration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  setKeeper(keeperAddress: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  setMinimumAnnualRateOfReturnOnLockedAssets(
    ratio: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  setPutStrikePriceRatioRange(
    minimumRatio: BigNumberish,
    maximumRatio: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  setTimeWindowForActivation(
    timeWindows: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  strike(strikeId: BigNumberish, overrides?: CallOverrides): Promise<StrikeStructOutput>

  timeWindowForActivation(overrides?: CallOverrides): Promise<BigNumber>

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>

  totalLockedAssets(overrides?: CallOverrides): Promise<BigNumber>

  transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  unpause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  unrealizedPNL(overrides?: CallOverrides): Promise<BigNumber>

  unrealizedPremium(overrides?: CallOverrides): Promise<BigNumber>

  updateCollectionRisk(
    collection: string,
    delta: BigNumberish,
    PNL: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  updateUnrealizedPNL(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  withdraw(amount: BigNumberish, to: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  callStatic: {
    KEEPER_FEE(overrides?: CallOverrides): Promise<BigNumber>

    MAXIMUM_CALL_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

    MAXIMUM_DURATION(overrides?: CallOverrides): Promise<BigNumber>

    MAXIMUM_LOCK_RATIO(overrides?: CallOverrides): Promise<BigNumber>

    MAXIMUM_PUT_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

    MINIMUM_CALL_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

    MINIMUM_DURATION(overrides?: CallOverrides): Promise<BigNumber>

    MINIMUM_PUT_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

    RESERVE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

    TIME_SCALE(overrides?: CallOverrides): Promise<BigNumber>

    activateMarket(collection: string, overrides?: CallOverrides): Promise<void>

    activatePosition(
      collection: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { premium: BigNumber; delta: BigNumber }>

    addMarket(collection: string, weight: BigNumberish, optionToken: string, overrides?: CallOverrides): Promise<number>

    adjustedVolatility(
      collection: string,
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    backstopPool(overrides?: CallOverrides): Promise<string>

    closePosition(collection: string, positionId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    collectUntitledAssetsFromLPToken(receiver: string, overrides?: CallOverrides): Promise<BigNumber>

    deactivateMarket(collection: string, overrides?: CallOverrides): Promise<void>

    decimals(overrides?: CallOverrides): Promise<number>

    defreezeMarket(collection: string, overrides?: CallOverrides): Promise<void>

    deposit(amount: BigNumberish, onBehalfOf: string, overrides?: CallOverrides): Promise<void>

    estimatePremium(
      collection: string,
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    feeRatio(overrides?: CallOverrides): Promise<BigNumber>

    forceClosePendingPosition(collection: string, positionId: BigNumberish, overrides?: CallOverrides): Promise<void>

    freezeMarket(collection: string, overrides?: CallOverrides): Promise<void>

    isActiveMarket(collection: string, overrides?: CallOverrides): Promise<boolean>

    isFrozenMarket(collection: string, overrides?: CallOverrides): Promise<boolean>

    isPaused(overrides?: CallOverrides): Promise<boolean>

    keeper(overrides?: CallOverrides): Promise<string>

    marketConfiguration(
      collection: string,
      overrides?: CallOverrides
    ): Promise<IVault.CollectionConfigurationStructOutput>

    markets(overrides?: CallOverrides): Promise<string[]>

    maximumOptionAmount(collection: string, optionType: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    minimumAnnualRateOfReturnOnLockedAssets(overrides?: CallOverrides): Promise<BigNumber>

    minimumPremium(
      collection: string,
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    openPosition(
      collection: string,
      onBehalfOf: string,
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      amount: BigNumberish,
      maximumPremium: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { positionId: BigNumber; premium: BigNumber }>

    owner(overrides?: CallOverrides): Promise<string>

    pause(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    positionPNLWeightedDelta(
      collection: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        unrealizePNL: BigNumber
        weightedDelta: BigNumber
      }
    >

    profitFeeRatio(overrides?: CallOverrides): Promise<BigNumber>

    redeem(amount: BigNumberish, to: string, overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    reserve(overrides?: CallOverrides): Promise<string>

    sendAssetsToLPToken(amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    setCallStrikePriceRatioRange(
      minimumRatio: BigNumberish,
      maximumRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setDurationRange(
      minimumDuration: BigNumberish,
      maximumDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setKeeper(keeperAddress: string, overrides?: CallOverrides): Promise<void>

    setMinimumAnnualRateOfReturnOnLockedAssets(ratio: BigNumberish, overrides?: CallOverrides): Promise<void>

    setPutStrikePriceRatioRange(
      minimumRatio: BigNumberish,
      maximumRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setTimeWindowForActivation(timeWindows: BigNumberish, overrides?: CallOverrides): Promise<void>

    strike(strikeId: BigNumberish, overrides?: CallOverrides): Promise<StrikeStructOutput>

    timeWindowForActivation(overrides?: CallOverrides): Promise<BigNumber>

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>

    totalLockedAssets(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

    unpause(overrides?: CallOverrides): Promise<void>

    unrealizedPNL(overrides?: CallOverrides): Promise<BigNumber>

    unrealizedPremium(overrides?: CallOverrides): Promise<BigNumber>

    updateCollectionRisk(
      collection: string,
      delta: BigNumberish,
      PNL: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    updateUnrealizedPNL(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(amount: BigNumberish, to: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    'ActivateMarket(address,address)'(operator?: string | null, collection?: string | null): ActivateMarketEventFilter
    ActivateMarket(operator?: string | null, collection?: string | null): ActivateMarketEventFilter

    'ActivatePosition(address,address,uint256,uint256,uint256,int256)'(
      owner?: string | null,
      collection?: string | null,
      positionId?: BigNumberish | null,
      premium?: null,
      excessPremium?: null,
      delta?: null
    ): ActivatePositionEventFilter
    ActivatePosition(
      owner?: string | null,
      collection?: string | null,
      positionId?: BigNumberish | null,
      premium?: null,
      excessPremium?: null,
      delta?: null
    ): ActivatePositionEventFilter

    'CancelPosition(address,address,uint256,uint256)'(
      owner?: string | null,
      collection?: string | null,
      positionId?: BigNumberish | null,
      returnedPremium?: null
    ): CancelPositionEventFilter
    CancelPosition(
      owner?: string | null,
      collection?: string | null,
      positionId?: BigNumberish | null,
      returnedPremium?: null
    ): CancelPositionEventFilter

    'CreateMarket(address,uint32,address)'(
      collection?: string | null,
      weight?: null,
      optionToken?: null
    ): CreateMarketEventFilter
    CreateMarket(collection?: string | null, weight?: null, optionToken?: null): CreateMarketEventFilter

    'CreateStrike(uint256,uint256,uint256,uint256,uint256)'(
      strikeId?: BigNumberish | null,
      duration?: null,
      expiration?: null,
      entryPrice?: null,
      strikePrice?: null
    ): CreateStrikeEventFilter
    CreateStrike(
      strikeId?: BigNumberish | null,
      duration?: null,
      expiration?: null,
      entryPrice?: null,
      strikePrice?: null
    ): CreateStrikeEventFilter

    'DeactivateMarket(address,address)'(
      operator?: string | null,
      collection?: string | null
    ): DeactivateMarketEventFilter
    DeactivateMarket(operator?: string | null, collection?: string | null): DeactivateMarketEventFilter

    'DefreezeMarket(address,address)'(operator?: string | null, collection?: string | null): DefreezeMarketEventFilter
    DefreezeMarket(operator?: string | null, collection?: string | null): DefreezeMarketEventFilter

    'DestoryStrike(uint256)'(strikeId?: BigNumberish | null): DestoryStrikeEventFilter
    DestoryStrike(strikeId?: BigNumberish | null): DestoryStrikeEventFilter

    'ExercisePosition(address,address,uint256,uint256,uint256,uint256)'(
      owner?: string | null,
      collection?: string | null,
      positionId?: BigNumberish | null,
      revenue?: null,
      exerciseFee?: null,
      settlementPrice?: null
    ): ExercisePositionEventFilter
    ExercisePosition(
      owner?: string | null,
      collection?: string | null,
      positionId?: BigNumberish | null,
      revenue?: null,
      exerciseFee?: null,
      settlementPrice?: null
    ): ExercisePositionEventFilter

    'ExpirePosition(address,address,uint256,uint256)'(
      owner?: string | null,
      collection?: string | null,
      positionId?: BigNumberish | null,
      settlementPrice?: null
    ): ExpirePositionEventFilter
    ExpirePosition(
      owner?: string | null,
      collection?: string | null,
      positionId?: BigNumberish | null,
      settlementPrice?: null
    ): ExpirePositionEventFilter

    'FailPosition(address,address,uint256,uint256,uint8)'(
      owner?: string | null,
      collection?: string | null,
      positionId?: BigNumberish | null,
      returnedPremium?: null,
      reason?: null
    ): FailPositionEventFilter
    FailPosition(
      owner?: string | null,
      collection?: string | null,
      positionId?: BigNumberish | null,
      returnedPremium?: null,
      reason?: null
    ): FailPositionEventFilter

    'FreezeMarket(address,address)'(operator?: string | null, collection?: string | null): FreezeMarketEventFilter
    FreezeMarket(operator?: string | null, collection?: string | null): FreezeMarketEventFilter

    'OpenPosition(address,address,address,uint256,(uint8,uint256,uint256,uint256,uint256,uint256,uint256))'(
      caller?: null,
      receiver?: string | null,
      collection?: string | null,
      positionId?: BigNumberish | null,
      parameters?: null
    ): OpenPositionEventFilter
    OpenPosition(
      caller?: null,
      receiver?: string | null,
      collection?: string | null,
      positionId?: BigNumberish | null,
      parameters?: null
    ): OpenPositionEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter

    'PauseVault(address)'(operator?: string | null): PauseVaultEventFilter
    PauseVault(operator?: string | null): PauseVaultEventFilter

    'Paused(address)'(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    'SendAssetsToLPToken(address,uint256)'(operator?: string | null, amount?: null): SendAssetsToLPTokenEventFilter
    SendAssetsToLPToken(operator?: string | null, amount?: null): SendAssetsToLPTokenEventFilter

    'UnpauseVault(address)'(operator?: string | null): UnpauseVaultEventFilter
    UnpauseVault(operator?: string | null): UnpauseVaultEventFilter

    'Unpaused(address)'(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter

    'UpdateCallStrikePriceRatioRange(address,uint256,uint256)'(
      operator?: string | null,
      minimumRatio?: null,
      maximumRatio?: null
    ): UpdateCallStrikePriceRatioRangeEventFilter
    UpdateCallStrikePriceRatioRange(
      operator?: string | null,
      minimumRatio?: null,
      maximumRatio?: null
    ): UpdateCallStrikePriceRatioRangeEventFilter

    'UpdateDurationRange(address,uint256,uint256)'(
      operator?: string | null,
      minimumDuration?: null,
      maximumDuration?: null
    ): UpdateDurationRangeEventFilter
    UpdateDurationRange(
      operator?: string | null,
      minimumDuration?: null,
      maximumDuration?: null
    ): UpdateDurationRangeEventFilter

    'UpdateKeeper(address,address)'(operator?: string | null, keeperAddress?: string | null): UpdateKeeperEventFilter
    UpdateKeeper(operator?: string | null, keeperAddress?: string | null): UpdateKeeperEventFilter

    'UpdateLPTokenPrice(address,uint256)'(lpToken?: string | null, newPrice?: null): UpdateLPTokenPriceEventFilter
    UpdateLPTokenPrice(lpToken?: string | null, newPrice?: null): UpdateLPTokenPriceEventFilter

    'UpdateMinimumAnnualRateOfReturnOnLockedAssets(address,uint256)'(
      operator?: string | null,
      ratio?: null
    ): UpdateMinimumAnnualRateOfReturnOnLockedAssetsEventFilter
    UpdateMinimumAnnualRateOfReturnOnLockedAssets(
      operator?: string | null,
      ratio?: null
    ): UpdateMinimumAnnualRateOfReturnOnLockedAssetsEventFilter

    'UpdatePutStrikePriceRatioRange(address,uint256,uint256)'(
      operator?: string | null,
      minimumRatio?: null,
      maximumRatio?: null
    ): UpdatePutStrikePriceRatioRangeEventFilter
    UpdatePutStrikePriceRatioRange(
      operator?: string | null,
      minimumRatio?: null,
      maximumRatio?: null
    ): UpdatePutStrikePriceRatioRangeEventFilter

    'UpdateTimeWindowForActivation(address,uint256)'(
      operator?: string | null,
      timeWindows?: null
    ): UpdateTimeWindowForActivationEventFilter
    UpdateTimeWindowForActivation(
      operator?: string | null,
      timeWindows?: null
    ): UpdateTimeWindowForActivationEventFilter
  }

  estimateGas: {
    KEEPER_FEE(overrides?: CallOverrides): Promise<BigNumber>

    MAXIMUM_CALL_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

    MAXIMUM_DURATION(overrides?: CallOverrides): Promise<BigNumber>

    MAXIMUM_LOCK_RATIO(overrides?: CallOverrides): Promise<BigNumber>

    MAXIMUM_PUT_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

    MINIMUM_CALL_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

    MINIMUM_DURATION(overrides?: CallOverrides): Promise<BigNumber>

    MINIMUM_PUT_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

    RESERVE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

    TIME_SCALE(overrides?: CallOverrides): Promise<BigNumber>

    activateMarket(collection: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    activatePosition(
      collection: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    addMarket(
      collection: string,
      weight: BigNumberish,
      optionToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    adjustedVolatility(
      collection: string,
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    backstopPool(overrides?: CallOverrides): Promise<BigNumber>

    closePosition(
      collection: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    collectUntitledAssetsFromLPToken(receiver: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    deactivateMarket(collection: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    defreezeMarket(collection: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    deposit(amount: BigNumberish, onBehalfOf: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    estimatePremium(
      collection: string,
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    feeRatio(overrides?: CallOverrides): Promise<BigNumber>

    forceClosePendingPosition(
      collection: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    freezeMarket(collection: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    isActiveMarket(collection: string, overrides?: CallOverrides): Promise<BigNumber>

    isFrozenMarket(collection: string, overrides?: CallOverrides): Promise<BigNumber>

    isPaused(overrides?: CallOverrides): Promise<BigNumber>

    keeper(overrides?: CallOverrides): Promise<BigNumber>

    marketConfiguration(collection: string, overrides?: CallOverrides): Promise<BigNumber>

    markets(overrides?: CallOverrides): Promise<BigNumber>

    maximumOptionAmount(collection: string, optionType: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    minimumAnnualRateOfReturnOnLockedAssets(overrides?: CallOverrides): Promise<BigNumber>

    minimumPremium(
      collection: string,
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    openPosition(
      collection: string,
      onBehalfOf: string,
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      amount: BigNumberish,
      maximumPremium: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    positionPNLWeightedDelta(
      collection: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    profitFeeRatio(overrides?: CallOverrides): Promise<BigNumber>

    redeem(amount: BigNumberish, to: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>

    reserve(overrides?: CallOverrides): Promise<BigNumber>

    sendAssetsToLPToken(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    setCallStrikePriceRatioRange(
      minimumRatio: BigNumberish,
      maximumRatio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    setDurationRange(
      minimumDuration: BigNumberish,
      maximumDuration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    setKeeper(keeperAddress: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    setMinimumAnnualRateOfReturnOnLockedAssets(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    setPutStrikePriceRatioRange(
      minimumRatio: BigNumberish,
      maximumRatio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    setTimeWindowForActivation(timeWindows: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    strike(strikeId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    timeWindowForActivation(overrides?: CallOverrides): Promise<BigNumber>

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>

    totalLockedAssets(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>

    unrealizedPNL(overrides?: CallOverrides): Promise<BigNumber>

    unrealizedPremium(overrides?: CallOverrides): Promise<BigNumber>

    updateCollectionRisk(
      collection: string,
      delta: BigNumberish,
      PNL: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    updateUnrealizedPNL(overrides?: Overrides & { from?: string }): Promise<BigNumber>

    withdraw(amount: BigNumberish, to: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>
  }

  populateTransaction: {
    KEEPER_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MAXIMUM_CALL_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MAXIMUM_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MAXIMUM_LOCK_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MAXIMUM_PUT_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MINIMUM_CALL_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MINIMUM_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MINIMUM_PUT_STRIKE_PRICE_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>

    RESERVE_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>

    TIME_SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    activateMarket(collection: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    activatePosition(
      collection: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    addMarket(
      collection: string,
      weight: BigNumberish,
      optionToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    adjustedVolatility(
      collection: string,
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    backstopPool(overrides?: CallOverrides): Promise<PopulatedTransaction>

    closePosition(
      collection: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    collectUntitledAssetsFromLPToken(
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    deactivateMarket(collection: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    defreezeMarket(collection: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    deposit(
      amount: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    estimatePremium(
      collection: string,
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    feeRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>

    forceClosePendingPosition(
      collection: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    freezeMarket(collection: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    isActiveMarket(collection: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    isFrozenMarket(collection: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>

    marketConfiguration(collection: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    markets(overrides?: CallOverrides): Promise<PopulatedTransaction>

    maximumOptionAmount(
      collection: string,
      optionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    minimumAnnualRateOfReturnOnLockedAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>

    minimumPremium(
      collection: string,
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    openPosition(
      collection: string,
      onBehalfOf: string,
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      amount: BigNumberish,
      maximumPremium: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pause(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    positionPNLWeightedDelta(
      collection: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    profitFeeRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>

    redeem(amount: BigNumberish, to: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sendAssetsToLPToken(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    setCallStrikePriceRatioRange(
      minimumRatio: BigNumberish,
      maximumRatio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    setDurationRange(
      minimumDuration: BigNumberish,
      maximumDuration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    setKeeper(keeperAddress: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    setMinimumAnnualRateOfReturnOnLockedAssets(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    setPutStrikePriceRatioRange(
      minimumRatio: BigNumberish,
      maximumRatio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    setTimeWindowForActivation(
      timeWindows: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    strike(strikeId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    timeWindowForActivation(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalLockedAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    unpause(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    unrealizedPNL(overrides?: CallOverrides): Promise<PopulatedTransaction>

    unrealizedPremium(overrides?: CallOverrides): Promise<PopulatedTransaction>

    updateCollectionRisk(
      collection: string,
      delta: BigNumberish,
      PNL: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    updateUnrealizedPNL(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    withdraw(amount: BigNumberish, to: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>
  }
}
