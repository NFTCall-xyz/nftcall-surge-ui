/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from '../../common'

export interface LPTokenInterface extends utils.Interface {
  functions: {
    'LOCK_PERIOD()': FunctionFragment
    'MAXIMUM_WITHDRAW_RATIO()': FunctionFragment
    'WITHDRAW_FEE_RATIO()': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'asset()': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'collectUntitledAssets(address)': FunctionFragment
    'convertToAssets(uint256)': FunctionFragment
    'convertToShares(uint256)': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'decreaseTotalAssets(uint256)': FunctionFragment
    'deposit(uint256,address,address)': FunctionFragment
    'deposit(uint256,address)': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'increaseTotalAssets(uint256)': FunctionFragment
    'initialize(address,uint256)': FunctionFragment
    'lockedBalanceOf(address)': FunctionFragment
    'maxDeposit(address)': FunctionFragment
    'maxMint(address)': FunctionFragment
    'maxRedeem(address)': FunctionFragment
    'maxWithdraw(address)': FunctionFragment
    'maximumVaultBalance()': FunctionFragment
    'mint(uint256,address)': FunctionFragment
    'name()': FunctionFragment
    'owner()': FunctionFragment
    'previewDeposit(uint256)': FunctionFragment
    'previewMint(uint256)': FunctionFragment
    'previewRedeem(uint256)': FunctionFragment
    'previewWithdraw(uint256)': FunctionFragment
    'redeem(uint256,address,address)': FunctionFragment
    'releaseTime(address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setMaximumVaultBalance(uint256)': FunctionFragment
    'setMinimumAssetToShareRatio(uint256)': FunctionFragment
    'setWholeWithdrawLimit(uint256)': FunctionFragment
    'symbol()': FunctionFragment
    'totalAssets()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'untitledAssets()': FunctionFragment
    'vault()': FunctionFragment
    'wholeWithdrawLimit()': FunctionFragment
    'withdraw(uint256,address,address)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'LOCK_PERIOD'
      | 'MAXIMUM_WITHDRAW_RATIO'
      | 'WITHDRAW_FEE_RATIO'
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'balanceOf'
      | 'collectUntitledAssets'
      | 'convertToAssets'
      | 'convertToShares'
      | 'decimals'
      | 'decreaseAllowance'
      | 'decreaseTotalAssets'
      | 'deposit(uint256,address,address)'
      | 'deposit(uint256,address)'
      | 'increaseAllowance'
      | 'increaseTotalAssets'
      | 'initialize'
      | 'lockedBalanceOf'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxWithdraw'
      | 'maximumVaultBalance'
      | 'mint'
      | 'name'
      | 'owner'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'redeem'
      | 'releaseTime'
      | 'renounceOwnership'
      | 'setMaximumVaultBalance'
      | 'setMinimumAssetToShareRatio'
      | 'setWholeWithdrawLimit'
      | 'symbol'
      | 'totalAssets'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'untitledAssets'
      | 'vault'
      | 'wholeWithdrawLimit'
      | 'withdraw'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'LOCK_PERIOD', values?: undefined): string
  encodeFunctionData(functionFragment: 'MAXIMUM_WITHDRAW_RATIO', values?: undefined): string
  encodeFunctionData(functionFragment: 'WITHDRAW_FEE_RATIO', values?: undefined): string
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(functionFragment: 'collectUntitledAssets', values: [string]): string
  encodeFunctionData(functionFragment: 'convertToAssets', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'convertToShares', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'decreaseTotalAssets', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'deposit(uint256,address,address)',
    values: [BigNumberish, string, string]
  ): string
  encodeFunctionData(functionFragment: 'deposit(uint256,address)', values: [BigNumberish, string]): string
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'increaseTotalAssets', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'initialize', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'lockedBalanceOf', values: [string]): string
  encodeFunctionData(functionFragment: 'maxDeposit', values: [string]): string
  encodeFunctionData(functionFragment: 'maxMint', values: [string]): string
  encodeFunctionData(functionFragment: 'maxRedeem', values: [string]): string
  encodeFunctionData(functionFragment: 'maxWithdraw', values: [string]): string
  encodeFunctionData(functionFragment: 'maximumVaultBalance', values?: undefined): string
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish, string]): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'previewDeposit', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'previewMint', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'previewRedeem', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'previewWithdraw', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'redeem', values: [BigNumberish, string, string]): string
  encodeFunctionData(functionFragment: 'releaseTime', values: [string]): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'setMaximumVaultBalance', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setMinimumAssetToShareRatio', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setWholeWithdrawLimit', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalAssets', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string
  encodeFunctionData(functionFragment: 'untitledAssets', values?: undefined): string
  encodeFunctionData(functionFragment: 'vault', values?: undefined): string
  encodeFunctionData(functionFragment: 'wholeWithdrawLimit', values?: undefined): string
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, string, string]): string

  decodeFunctionResult(functionFragment: 'LOCK_PERIOD', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MAXIMUM_WITHDRAW_RATIO', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'WITHDRAW_FEE_RATIO', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'collectUntitledAssets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'convertToAssets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'convertToShares', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decreaseTotalAssets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit(uint256,address,address)', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit(uint256,address)', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'increaseTotalAssets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'lockedBalanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxWithdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maximumVaultBalance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'previewDeposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'previewMint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'previewRedeem', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'previewWithdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'releaseTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMaximumVaultBalance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMinimumAssetToShareRatio', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setWholeWithdrawLimit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'untitledAssets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'vault', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'wholeWithdrawLimit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'Claim(address,uint256)': EventFragment
    'Collect(address,uint256)': EventFragment
    'Deposit(address,address,uint256,uint256)': EventFragment
    'Initialize(address,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'UpdateMaximumVaultBalance(uint256)': EventFragment
    'UpdateMinimumAssetToShareRatio(uint256)': EventFragment
    'UpdateTotalAssets(uint256)': EventFragment
    'UpdateWholeWithdrawLimit(uint256)': EventFragment
    'Withdraw(address,address,address,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Claim'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Collect'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialize'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateMaximumVaultBalance'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateMinimumAssetToShareRatio'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateTotalAssets'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateWholeWithdrawLimit'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
}

export interface ApprovalEventObject {
  owner: string
  spender: string
  value: BigNumber
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface ClaimEventObject {
  user: string
  amount: BigNumber
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>

export interface CollectEventObject {
  receiver: string
  amount: BigNumber
}
export type CollectEvent = TypedEvent<[string, BigNumber], CollectEventObject>

export type CollectEventFilter = TypedEventFilter<CollectEvent>

export interface DepositEventObject {
  sender: string
  owner: string
  assets: BigNumber
  shares: BigNumber
}
export type DepositEvent = TypedEvent<[string, string, BigNumber, BigNumber], DepositEventObject>

export type DepositEventFilter = TypedEventFilter<DepositEvent>

export interface InitializeEventObject {
  vault: string
  maxVaultBalance: BigNumber
}
export type InitializeEvent = TypedEvent<[string, BigNumber], InitializeEventObject>

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface TransferEventObject {
  from: string
  to: string
  value: BigNumber
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface UpdateMaximumVaultBalanceEventObject {
  maxVaultBalance: BigNumber
}
export type UpdateMaximumVaultBalanceEvent = TypedEvent<[BigNumber], UpdateMaximumVaultBalanceEventObject>

export type UpdateMaximumVaultBalanceEventFilter = TypedEventFilter<UpdateMaximumVaultBalanceEvent>

export interface UpdateMinimumAssetToShareRatioEventObject {
  ratio: BigNumber
}
export type UpdateMinimumAssetToShareRatioEvent = TypedEvent<[BigNumber], UpdateMinimumAssetToShareRatioEventObject>

export type UpdateMinimumAssetToShareRatioEventFilter = TypedEventFilter<UpdateMinimumAssetToShareRatioEvent>

export interface UpdateTotalAssetsEventObject {
  amount: BigNumber
}
export type UpdateTotalAssetsEvent = TypedEvent<[BigNumber], UpdateTotalAssetsEventObject>

export type UpdateTotalAssetsEventFilter = TypedEventFilter<UpdateTotalAssetsEvent>

export interface UpdateWholeWithdrawLimitEventObject {
  limit: BigNumber
}
export type UpdateWholeWithdrawLimitEvent = TypedEvent<[BigNumber], UpdateWholeWithdrawLimitEventObject>

export type UpdateWholeWithdrawLimitEventFilter = TypedEventFilter<UpdateWholeWithdrawLimitEvent>

export interface WithdrawEventObject {
  sender: string
  receiver: string
  owner: string
  assets: BigNumber
  shares: BigNumber
}
export type WithdrawEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], WithdrawEventObject>

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>

export interface LPToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: LPTokenInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    LOCK_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>

    MAXIMUM_WITHDRAW_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>

    WITHDRAW_FEE_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    asset(overrides?: CallOverrides): Promise<[string]>

    balanceOf(user: string, overrides?: CallOverrides): Promise<[BigNumber]>

    collectUntitledAssets(receiver: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    convertToAssets(shares: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { assets: BigNumber }>

    convertToShares(assets: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { shares: BigNumber }>

    decimals(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    decreaseTotalAssets(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    'deposit(uint256,address,address)'(
      assets: BigNumberish,
      user: string,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    'deposit(uint256,address)'(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    increaseTotalAssets(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    initialize(
      vaultAddress: string,
      maxVaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    lockedBalanceOf(user: string, overrides?: CallOverrides): Promise<[BigNumber]>

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    maxMint(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    maxRedeem(user: string, overrides?: CallOverrides): Promise<[BigNumber]>

    maxWithdraw(user: string, overrides?: CallOverrides): Promise<[BigNumber]>

    maximumVaultBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    mint(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    previewDeposit(assets: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    previewMint(shares: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    previewRedeem(shares: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    previewWithdraw(assets: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    releaseTime(user: string, overrides?: CallOverrides): Promise<[BigNumber]>

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    setMaximumVaultBalance(
      maxVaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    setMinimumAssetToShareRatio(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    setWholeWithdrawLimit(limit: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<[string]>

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(to: string, amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    untitledAssets(overrides?: CallOverrides): Promise<[BigNumber]>

    vault(overrides?: CallOverrides): Promise<[string]>

    wholeWithdrawLimit(overrides?: CallOverrides): Promise<[BigNumber]>

    withdraw(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>
  }

  LOCK_PERIOD(overrides?: CallOverrides): Promise<BigNumber>

  MAXIMUM_WITHDRAW_RATIO(overrides?: CallOverrides): Promise<BigNumber>

  WITHDRAW_FEE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  asset(overrides?: CallOverrides): Promise<string>

  balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>

  collectUntitledAssets(receiver: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  convertToAssets(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  convertToShares(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  decimals(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  decreaseTotalAssets(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  'deposit(uint256,address,address)'(
    assets: BigNumberish,
    user: string,
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  'deposit(uint256,address)'(
    assets: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  increaseTotalAssets(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  initialize(
    vaultAddress: string,
    maxVaultBalance: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  lockedBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>

  maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  maxRedeem(user: string, overrides?: CallOverrides): Promise<BigNumber>

  maxWithdraw(user: string, overrides?: CallOverrides): Promise<BigNumber>

  maximumVaultBalance(overrides?: CallOverrides): Promise<BigNumber>

  mint(shares: BigNumberish, receiver: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  previewDeposit(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  previewMint(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  previewRedeem(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  previewWithdraw(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  redeem(
    shares: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  releaseTime(user: string, overrides?: CallOverrides): Promise<BigNumber>

  renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  setMaximumVaultBalance(
    maxVaultBalance: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  setMinimumAssetToShareRatio(
    ratio: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  setWholeWithdrawLimit(limit: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  symbol(overrides?: CallOverrides): Promise<string>

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  transfer(to: string, amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  untitledAssets(overrides?: CallOverrides): Promise<BigNumber>

  vault(overrides?: CallOverrides): Promise<string>

  wholeWithdrawLimit(overrides?: CallOverrides): Promise<BigNumber>

  withdraw(
    assets: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  callStatic: {
    LOCK_PERIOD(overrides?: CallOverrides): Promise<BigNumber>

    MAXIMUM_WITHDRAW_RATIO(overrides?: CallOverrides): Promise<BigNumber>

    WITHDRAW_FEE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    asset(overrides?: CallOverrides): Promise<string>

    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>

    collectUntitledAssets(receiver: string, overrides?: CallOverrides): Promise<BigNumber>

    convertToAssets(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    convertToShares(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    decreaseTotalAssets(amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    'deposit(uint256,address,address)'(
      assets: BigNumberish,
      user: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'deposit(uint256,address)'(assets: BigNumberish, receiver: string, overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    increaseTotalAssets(amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    initialize(vaultAddress: string, maxVaultBalance: BigNumberish, overrides?: CallOverrides): Promise<void>

    lockedBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    maxRedeem(user: string, overrides?: CallOverrides): Promise<BigNumber>

    maxWithdraw(user: string, overrides?: CallOverrides): Promise<BigNumber>

    maximumVaultBalance(overrides?: CallOverrides): Promise<BigNumber>

    mint(shares: BigNumberish, receiver: string, overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    previewDeposit(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    previewMint(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    previewRedeem(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    previewWithdraw(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    redeem(shares: BigNumberish, receiver: string, owner: string, overrides?: CallOverrides): Promise<BigNumber>

    releaseTime(user: string, overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setMaximumVaultBalance(maxVaultBalance: BigNumberish, overrides?: CallOverrides): Promise<void>

    setMinimumAssetToShareRatio(ratio: BigNumberish, overrides?: CallOverrides): Promise<void>

    setWholeWithdrawLimit(limit: BigNumberish, overrides?: CallOverrides): Promise<void>

    symbol(overrides?: CallOverrides): Promise<string>

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    transferFrom(from: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

    untitledAssets(overrides?: CallOverrides): Promise<BigNumber>

    vault(overrides?: CallOverrides): Promise<string>

    wholeWithdrawLimit(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(assets: BigNumberish, receiver: string, owner: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter

    'Claim(address,uint256)'(user?: string | null, amount?: null): ClaimEventFilter
    Claim(user?: string | null, amount?: null): ClaimEventFilter

    'Collect(address,uint256)'(receiver?: string | null, amount?: null): CollectEventFilter
    Collect(receiver?: string | null, amount?: null): CollectEventFilter

    'Deposit(address,address,uint256,uint256)'(
      sender?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter
    Deposit(sender?: string | null, owner?: string | null, assets?: null, shares?: null): DepositEventFilter

    'Initialize(address,uint256)'(vault?: string | null, maxVaultBalance?: null): InitializeEventFilter
    Initialize(vault?: string | null, maxVaultBalance?: null): InitializeEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter

    'UpdateMaximumVaultBalance(uint256)'(maxVaultBalance?: null): UpdateMaximumVaultBalanceEventFilter
    UpdateMaximumVaultBalance(maxVaultBalance?: null): UpdateMaximumVaultBalanceEventFilter

    'UpdateMinimumAssetToShareRatio(uint256)'(ratio?: null): UpdateMinimumAssetToShareRatioEventFilter
    UpdateMinimumAssetToShareRatio(ratio?: null): UpdateMinimumAssetToShareRatioEventFilter

    'UpdateTotalAssets(uint256)'(amount?: null): UpdateTotalAssetsEventFilter
    UpdateTotalAssets(amount?: null): UpdateTotalAssetsEventFilter

    'UpdateWholeWithdrawLimit(uint256)'(limit?: null): UpdateWholeWithdrawLimitEventFilter
    UpdateWholeWithdrawLimit(limit?: null): UpdateWholeWithdrawLimitEventFilter

    'Withdraw(address,address,address,uint256,uint256)'(
      sender?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter
    Withdraw(
      sender?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter
  }

  estimateGas: {
    LOCK_PERIOD(overrides?: CallOverrides): Promise<BigNumber>

    MAXIMUM_WITHDRAW_RATIO(overrides?: CallOverrides): Promise<BigNumber>

    WITHDRAW_FEE_RATIO(overrides?: CallOverrides): Promise<BigNumber>

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

    approve(spender: string, amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    asset(overrides?: CallOverrides): Promise<BigNumber>

    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>

    collectUntitledAssets(receiver: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    convertToAssets(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    convertToShares(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    decreaseTotalAssets(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    'deposit(uint256,address,address)'(
      assets: BigNumberish,
      user: string,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    'deposit(uint256,address)'(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    increaseTotalAssets(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    initialize(
      vaultAddress: string,
      maxVaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    lockedBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    maxRedeem(user: string, overrides?: CallOverrides): Promise<BigNumber>

    maxWithdraw(user: string, overrides?: CallOverrides): Promise<BigNumber>

    maximumVaultBalance(overrides?: CallOverrides): Promise<BigNumber>

    mint(shares: BigNumberish, receiver: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    previewDeposit(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    previewMint(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    previewRedeem(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    previewWithdraw(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    releaseTime(user: string, overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>

    setMaximumVaultBalance(maxVaultBalance: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    setMinimumAssetToShareRatio(ratio: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    setWholeWithdrawLimit(limit: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(to: string, amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    untitledAssets(overrides?: CallOverrides): Promise<BigNumber>

    vault(overrides?: CallOverrides): Promise<BigNumber>

    wholeWithdrawLimit(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    LOCK_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MAXIMUM_WITHDRAW_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>

    WITHDRAW_FEE_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>

    balanceOf(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    collectUntitledAssets(receiver: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    convertToAssets(shares: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    convertToShares(assets: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    decreaseTotalAssets(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    'deposit(uint256,address,address)'(
      assets: BigNumberish,
      user: string,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    'deposit(uint256,address)'(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    increaseTotalAssets(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    initialize(
      vaultAddress: string,
      maxVaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    lockedBalanceOf(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    maxMint(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    maxRedeem(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    maxWithdraw(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    maximumVaultBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    mint(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    previewDeposit(assets: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    previewMint(shares: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    previewRedeem(shares: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    previewWithdraw(assets: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    releaseTime(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    setMaximumVaultBalance(
      maxVaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    setMinimumAssetToShareRatio(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    setWholeWithdrawLimit(limit: BigNumberish, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(to: string, amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    untitledAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>

    wholeWithdrawLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdraw(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>
  }
}
